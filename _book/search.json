[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Wizualizacja Danych 2024",
    "section": "",
    "text": "1 Wizualizacja Danych 2024\nMateriały na semestr letni - rok akademicki 2023/24.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Wizualizacja Danych 2024</span>"
    ]
  },
  {
    "objectID": "trocheteorii.html",
    "href": "trocheteorii.html",
    "title": "2  Trochę teorii…",
    "section": "",
    "text": "2.1 Test racjonalnego myślenia\nWizualizacja – ogólna nazwa graficznych metod tworzenia, analizy i przekazywania informacji. Za pomocą środków wizualnych ludzie wymieniają się zarówno ideami abstrakcyjnymi, jak i komunikatami mającymi bezpośrednie oparcie w rzeczywistości. W dzisiejszych czasach wizualizacja wpływa na sposób prowadzenia badań naukowych, jest rutynowo wykorzystywana w dyscyplinach technicznych i medycynie, służy celom dydaktycznym, a także bywa pojmowana jako środek wyrazu artystycznego.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Trochę teorii...</span>"
    ]
  },
  {
    "objectID": "trocheteorii.html#test-racjonalnego-myślenia",
    "href": "trocheteorii.html#test-racjonalnego-myślenia",
    "title": "2  Trochę teorii…",
    "section": "",
    "text": "Jeśli 5 maszyn w ciągu 5 minut produkuje 5 urządzeń, ile czasu zajmie 100 maszynom zrobienie 100 urządzeń?\nNa stawie rozrasta się kępa lilii wodnych. Codziennie kępa staje się dwukrotnie większa. Jeśli zarośnięcie całego stawu zajmie liliom 48 dni, to ile dni potrzeba, żeby zarosły połowę stawu?\nKij bejsbolowy i piłka kosztują razem 1 dolar i 10 centów. Kij kosztuje o dolara więcej niż piłka. Ile kosztuje piłka?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Trochę teorii...</span>"
    ]
  },
  {
    "objectID": "trocheteorii.html#analiza-danych---podstawowe-pojęcia",
    "href": "trocheteorii.html#analiza-danych---podstawowe-pojęcia",
    "title": "2  Trochę teorii…",
    "section": "2.2 Analiza danych - podstawowe pojęcia",
    "text": "2.2 Analiza danych - podstawowe pojęcia\n\n2.2.1 Współczesne znaczenia słowa “statystyka”:\n\nzbiór danych liczbowych pokazujący kształtowanie procesów i zjawisk np. statystyka ludności.\nwszelkie czynności związane z gromadzeniem i opracowywaniem danych liczbowych np. statystyka pewnego problemu dokonywana przez GUS.\ncharakterystyki liczbowe np. statystyki próby np. średnia arytmetyczna, odchylenie standardowe itp.\ndyscyplina naukowa - nauka o metodach badania zjawisk masowych.\n\n\n\n2.2.2 “Masowość”\nZjawiska/procesy masowe - badaniu podlega duża liczba jednostek. Dzielą się na:\n\ngospodarcze (np. produkcja, konsumpcja, usługi reklama),\nspołeczne (np. wypadki drogowe, poglądy polityczne),\ndemograficzne (np. urodzenia, starzenie, migracje).\n\n\n\n2.2.3 Podział statystyki\nStatystyka - dyscyplina naukowa - podział:\n\nstatystyka opisowa - zajmuje się sprawami związanymi z gromadzeniem, prezentacją, analizą i interpretacją danych liczbowych. Obserwacja obejmuje całą badaną zbiorowość.\nstatystyka matematyczna - uogólnienie wyników badania części zbiorowości (próby) na całą zbiorowość.\n\n\n\n2.2.4 Zbiorowość/populacja\nZbiorowość statystyczna, populacja statystyczna: zbiór obiektów podlegających badaniu statystycznemu. Tworzą je jednostki podobne do siebie, logicznie powiązane, lecz nie identyczne. Mają pewne cechy wspólne oraz pewne właściwości pozwalające je różnicować.\n\nprzykłady:\n\nbadanie wzrostu Polaków - mieszkańcy Polski\npoziom nauczania w szkołach woj. warmińsko-mazurskiego - szkoły woj. warmińsko-mazurskiego.\n\npodział:\n\nzbiorowość/populacja generalna - obejmuje całość,\nzbiorowość/populacja próbna (próba) - obejmuje część populacji.\n\n\n\n\n2.2.5 Jednostka statyczna\nJednostka statystyczna: każdy z elementów zbiorowości statystycznej.\n\nprzykłady:\n\nstudenci UWM - student UWM\nmieszkańcy Polski - każda osoba mieszkająca w Polsce\nmaszyny produkowane w fabryce - każda maszyna\n\n\n\n\n2.2.6 Cechy statystyczne\nCechy statystyczne\n\nwłaściwości charakteryzujące jednostki statystyczne w danej zbiorowości statystycznej.\ndzielimy je na stałe i zmienne.\n\nCechy stałe\n\ntakie właściwości, które są wspólne wszystkim jednostkom danej zbiorowości statystycznej.\npodział:\n\nrzeczowe - kto lub co jest przedmiotem badania statystycznego,\nczasowe - kiedy zostało przeprowadzone badanie lub jakiego okresu czasu dotyczy badanie,\nprzestrzenne - jakiego terytorium (miejsce lub obszar) dotyczy badanie.\n\nprzykład: studenci WMiI UWM w Olsztynie w roku akad. 2017/2018:\n\ncecha rzeczowa: posiadanie legitymacji studenckiej,\ncecha czasowa - studenci studiujący w roku akad. 2017/2018\ncecha przestrzenna - miejsce: WMiI UWM w Olsztynie.\n\n\nCechy zmienne\n\nwłaściwości różnicujące jednostki statystyczne w danej zbiorowości.\nprzykład: studenci UWM - cechy zmienne: wiek, płeć, rodzaj ukończonej szkoły średniej, kolor oczu, wzrost.\n\nWażne:\n\nobserwacji podlegają tylko cechy zmienne,\ncecha stała w jednej zbiorowości może być cechą zmienną w innej zbiorowości.\n\nPrzykład: studenci UWM mają legitymację wydaną przez UWM. Studenci wszystkich uczelni w Polsce mają legitymacje wydane przez różne szkoły.\nPodział cech zmiennych:\n\ncechy mierzalne (ilościowe) - można je wyrazić liczbą wraz z określoną jednostką miary.\ncechy niemierzalne (jakościowe) - określane słownie, reprezentują pewne kategorie.\n\nPrzykład: zbiorowość studentów. Cechy mierzalne: wiek, waga, wzrost, liczba nieobecności. Cechy niemierzalne: płeć, kolor oczu, kierunek studiów.\nCzęsto ze względów praktycznych cechom niemierzalnym przypisywane są kody liczbowe. Nie należy ich jednak mylić z cechami mierzalnymi. Np. 1 - wykształcenie podstawowe, 2 - wykształcenie zasadnicze, itd…\nPodział cech mierzalnych:\n\nciągłe - mogące przybrać każdą wartość z określonego przedziału, np. wzrost, wiek, powierzchnia mieszkania.\nskokowe - mogące przyjmować konkretne (dyskretne) wartości liczbowe bez wartości pośrednich np. liczba osób w gospodarstwie domowych, liczba osób zatrudnionych w danej firmie.\n\nCechy skokowe zazwyczaj mają wartości całkowite choć nie zawsze jest to wymagane np. liczba etatów w firmie (z uwzględnieniem części etatów).\n\n\n2.2.7 Skale\nSkala pomiarowa\n\nto system, pozwalający w pewien sposób usystematyzować wyniki pomiarów statystycznych.\npodział:\n\nskala nominalna,\nskala porządkowa,\nskala przedziałowa (interwałowa),\nskala ilorazowa (stosunkowa).\n\n\nSkala nominalna\n\nskala, w której klasyfikujemy jednostkę statystyczną do określonej kategorii.\nwartość w tej skali nie ma żadnego uporządkowana.\nprzykład:\n\n\n\n\nReligia\nKod\n\n\n\n\nChrześcijaństwo\n1\n\n\nIslam\n2\n\n\nBuddyzm\n3\n\n\n\nSkala porządkowa\n\nwartości mają jasno określony porządek, ale nie są dane odległości między nimi,\npozwala na uszeregowanie elementów.\nprzykłady:\n\n\n\n\nWykształcenie\nKod\n\n\n\n\nPodstawowe\n1\n\n\nŚrednie\n2\n\n\nWyższe\n3\n\n\n\n\n\n\nDochód\nKod\n\n\n\n\nNiski\n1\n\n\nŚredni\n2\n\n\nWysoki\n3\n\n\n\nSkala przedziałowa (interwałowa)\n\nwartości cechy wyrażone są poprzez konkretne wartości liczbowe,\npozwala na porównywanie jednostek (coś jest większe lub mniejsze),\nnie możliwe jest badanie ilorazów (określenie ile razy dana wartość jest większa lub mniejsza od drugiej).\nprzykład:\n\n\n\n\nMiasto\nTemperatura w \\(^{\\circ}C\\)\nTemperatura w \\(^{\\circ}F\\)\n\n\n\n\nWarszawa\n15\n59\n\n\nOlsztyn\n10\n50\n\n\nGdańsk\n5\n41\n\n\nSzczecin\n20\n68\n\n\n\nSkala ilorazowa (stosunkowa)\n\nwartości wyrażone są przez wartości liczbowe,\nmożliwe określenie jest relacji mniejsza lub większa między wartościami,\nmożliwe jest określenie stosunku (ilorazu) między wartościami,\nwystępuje zero absolutne.\nprzykład:\n\n\n\n\nProdukt\nCena w zł\n\n\n\n\nChleb\n3\n\n\nMasło\n8\n\n\nGruszki\n5",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Trochę teorii...</span>"
    ]
  },
  {
    "objectID": "trocheteorii.html#rodzaje-badań-statystycznych",
    "href": "trocheteorii.html#rodzaje-badań-statystycznych",
    "title": "2  Trochę teorii…",
    "section": "2.3 Rodzaje badań statystycznych",
    "text": "2.3 Rodzaje badań statystycznych\n\nbadanie pełne - obejmują wszystkie jednostki zbiorowości statystycznej.\n\nspis statystyczny,\nrejestracja bieżąca,\nsprawozdawczość statystyczna.\n\nbadania częściowe - obserwowana jest część populacji. Przeprowadza się wtedy gdy badanie pełne jest niecelowe lub niemożliwe.\n\nmetoda monograficzna,\nmetoda reprezentacyjna.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Trochę teorii...</span>"
    ]
  },
  {
    "objectID": "trocheteorii.html#etapy-badania-statystycznego",
    "href": "trocheteorii.html#etapy-badania-statystycznego",
    "title": "2  Trochę teorii…",
    "section": "2.4 Etapy badania statystycznego",
    "text": "2.4 Etapy badania statystycznego\n\nprojektowanie i organizacja badania: ustalenie celu, podmiotu, przedmiotu, zakresu, źródła i czasu trwania badania;\nobserwacja statystyczna;\nopracowanie materiału statystycznego: kontrola materiału statystycznego, grupowanie uzyskanych danych, prezentacja wyników danych;\nanaliza statystyczna.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Trochę teorii...</span>"
    ]
  },
  {
    "objectID": "trocheteorii.html#analiza-danych-zastanych",
    "href": "trocheteorii.html#analiza-danych-zastanych",
    "title": "2  Trochę teorii…",
    "section": "2.5 Analiza danych zastanych",
    "text": "2.5 Analiza danych zastanych\nAnaliza danych zastanych – proces przetwarzania danych w celu uzyskania na ich podstawie użytecznych informacji i wniosków. W zależności od rodzaju danych i stawianych problemów, może to oznaczać użycie metod statystycznych, eksploracyjnych i innych.\nKorzystanie z danych zastanych jest przykładem badań niereaktywnych - metod badań zachowań społecznych, które nie wpływają na te zachowania. Dane takie to: dokumenty, archiwa, sprawozdania, kroniki, spisy ludności, księgi parafialne, dzienniki, pamiętniki, blogi internetowe, audio-pamiętniki, archiwa historii mówionej i inne. (Wikipedia)\nDane zastane możemy podzielić ze względu na (Makowska red. 2013):\n\nCharakter: Ilościowe, Jakościowe\nFormę: Dane opracowane, Dane surowe\nSposób powstania: Pierwotne, Wtórne\nDynamikę: Ciągła rejestracja zdarzeń, Rejestracja w interwałach czasowych, Rejestracja jednorazowa\nPoziom obiektywizmu: Obiektywne, Subiektywne\nŹródła pochodzenia: Dane publiczne, Dane prywatne\n\nAnaliza danych to proces polegający na sprawdzaniu, porządkowaniu, przekształcaniu i modelowaniu danych w celu zdobycia użytecznych informacji, wypracowania wniosków i wspierania procesu decyzyjnego. Analiza danych ma wiele aspektów i podejść, obejmujących różne techniki pod różnymi nazwami, w różnych obszarach biznesowych, naukowych i społecznych. Praktyczne podejście do definiowania danych polega na tym, że dane to liczby, znaki, obrazy lub inne metody zapisu, w formie, którą można ocenić w celu określenia lub podjęcia decyzji o konkretnym działaniu. Wiele osób uważa, że dane same w sobie nie mają znaczenia – dopiero dane przetworzone i zinterpretowane stają się informacją.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Trochę teorii...</span>"
    ]
  },
  {
    "objectID": "trocheteorii.html#proces-analizy-danych",
    "href": "trocheteorii.html#proces-analizy-danych",
    "title": "2  Trochę teorii…",
    "section": "2.6 Proces analizy danych",
    "text": "2.6 Proces analizy danych\nAnaliza odnosi się do rozbicia całości posiadanych informacji na jej odrębne komponenty w celu indywidualnego badania. Analiza danych to proces uzyskiwania nieprzetworzonych danych i przekształcania ich w informacje przydatne do podejmowania decyzji przez użytkowników. Dane są zbierane i analizowane, aby odpowiadać na pytania, testować hipotezy lub obalać teorie. Istnieje kilka faz, które można wyszczególnić w procesie analizy danych. Fazy są iteracyjne, ponieważ informacje zwrotne z faz kolejnych mogą spowodować dodatkową pracę w fazach wcześniejszych.\n\n2.6.1 Zdefiniowanie wymagań\nPrzed przystąpieniem do analizy danych, należy dokładnie określić wymagania jakościowe dotyczące danych. Dane wejściowe, które mają być przedmiotem analizy, są określone na podstawie wymagań osób kierujących analizą lub klientów (którzy będą używać finalnego produktu analizy). Ogólny typ jednostki, na podstawie której dane będą zbierane, jest określany jako jednostka eksperymentalna (np. osoba lub populacja ludzi. Dane mogą być liczbowe lub kategoryczne (tj. Etykiety tekstowe). Faza definiowania wymagań powinna dać odpowiedź na 2 zasadnicze pytania:\n\nco chcemy zmierzyć?\nw jaki sposób chcemy to zmierzyć?\n\n\n\n2.6.2 Gromadzenie danych\nDane są gromadzone z różnych źródeł. Wymogi, co do rodzaju i jakości danych mogą być przekazywane przez analityków do “opiekunów danych”, takich jak personel technologii informacyjnych w organizacji. Dane ponadto mogą być również gromadzone automatycznie z różnego rodzaju czujników znajdujących się w otoczeniu - takich jak kamery drogowe, satelity, urządzenia rejestrujące obraz, dźwięk oraz parametry fizyczne. Kolejną metodą jest również pozyskiwanie danych w drodze wywiadów, gromadzenie ze źródeł internetowych lub bezpośrednio z dokumentacji.\n\n\n2.6.3 Przetwarzanie danych\nZgromadzone dane muszą zostać przetworzone lub zorganizowane w sposób logiczny do analizy. Na przykład, mogą one zostać umieszczone w tabelach w celu dalszej analizy - w arkuszu kalkulacyjnym lub innym oprogramowaniu. Oczyszczanie danych Po fazie przetworzenia i uporządkowania, dane mogą być niekompletne, zawierać duplikaty lub zawierać błędy. Konieczność czyszczenia danych wynika z problemów związanych z wprowadzaniem i przechowywaniem danych. Czyszczenie danych to proces zapobiegania powstawaniu i korygowania wykrytych błędów. Typowe zadania obejmują dopasowywanie rekordów, identyfikowanie nieścisłości, ogólny przegląd jakość istniejących danych, usuwanie duplikatów i segmentację kolumn. Niezwykłe istotne jest też zwracanie uwagi na dane których wartości są powyżej lub poniżej ustalonych wcześniej progów (ekstrema).\n\n\n2.6.4 Właściwa analiza danych\nIstnieje kilka metod, które można wykorzystać do tego celu, na przykład data mining, business intelligence, wizualizacja danych lub badania eksploracyjne. Ta ostatnia metoda jest sposobem analizowania zbiorów informacji w celu określenia ich odrębnych cech. W ten sposób dane mogą zostać wykorzystane do przetestowania pierwotnej hipotezy. Statystyki opisowe to kolejna metoda analizy zebranych informacji. Dane są badane, aby znaleźć najważniejsze ich cechy. W statystykach opisowych analitycy używają kilku podstawowych narzędzi - można użyć średniej lub średniej z zestawu liczb. Pomaga to określić ogólny trend aczkolwiek nie zapewnia to dużej dokładności przy ocenie ogólnego obrazu zebranych danych. W tej fazie ma miejsce również modelowanie i tworzenie formuł matematycznych - stosowane są w celu identyfikacji zależności między zmiennymi, takich jak korelacja lub przyczynowość.\n\n\n2.6.5 Raportowanie i dystrybucja wyników\nTa faza polega na ustalaniu w jakiej formie przekazywać wyniki. Analityk może rozważyć róże techniki wizualizacji danych, aby w sposób wyraźnym i skuteczny przekazać wnioski z analizy odbiorcom. Wizualizacja danych wykorzystuje formy graficzne jak wykresy i tabele. Tabele są przydatne dla użytkownika, który może wyszukiwać konkretne rekordy, podczas gdy wykresy (np. wykresy słupkowe lub liniowe) dają spojrzenie ilościowych na zbiór analizowanych danych.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Trochę teorii...</span>"
    ]
  },
  {
    "objectID": "trocheteorii.html#skąd-brać-dane",
    "href": "trocheteorii.html#skąd-brać-dane",
    "title": "2  Trochę teorii…",
    "section": "2.7 Skąd brać dane?",
    "text": "2.7 Skąd brać dane?\nDarmowa repozytoria danych:\n\nBank danych lokalnych GUS - link\nOtwarte dane - link\nBank Światowy - link\n\nPrzydatne strony:\n\nhttps://www.kaggle.com/\nhttps://archive.ics.uci.edu/ml/index.php",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Trochę teorii...</span>"
    ]
  },
  {
    "objectID": "trocheteorii.html#koncepcja-tidy-data",
    "href": "trocheteorii.html#koncepcja-tidy-data",
    "title": "2  Trochę teorii…",
    "section": "2.8 Koncepcja “Tidy data”",
    "text": "2.8 Koncepcja “Tidy data”\nKoncepcja czyszczenia danych (ang. tidy data):\n\nWICKHAM, Hadley . Tidy Data. Journal of Statistical Software, [S.l.], v. 59, Issue 10, p. 1 - 23, sep. 2014. ISSN 1548-7660. Available at: https://www.jstatsoft.org/v059/i10. Date accessed: 25 oct. 2018. doi:http://dx.doi.org/10.18637/jss.v059.i10.\n\n\n2.8.1 Zasady “czystych danych”\nIdealne dane są zaprezentowane w tabeli:\n\n\n\nImię\nWiek\nWzrost\nKolor oczu\n\n\n\n\nAdam\n26\n167\nBrązowe\n\n\nSylwia\n34\n164\nPiwne\n\n\nTomasz\n42\n183\nNiebieskie\n\n\n\nNa co powinniśmy zwrócić uwagę?\n\njedna obserwacja (jednostka statystyczna) = jeden wiersz w tabeli/macierzy/ramce danych\nwartości danej cechy znajdują się w kolumnach\njeden typ/rodzaj obserwacji w jednej tabeli/macierzy/ramce danych\n\n\n\n2.8.2 Przykłady nieuporządkowanych danych\n\n\n\nImię\nWiek\nWzrost\nBrązowe\nNiebieskie\nPiwne\n\n\n\n\nAdam\n26\n167\n1\n0\n0\n\n\nSylwia\n34\n164\n0\n0\n1\n\n\nTomasz\n42\n183\n0\n1\n0\n\n\n\nNagłowki kolumn muszą odpowiadać cechom, a nie wartościom zmiennych.\n\n\n2.8.3 Długie czy szerokie dane?\nhttps://seaborn.pydata.org/tutorial/data_structure.html#long-form-vs-wide-form-data",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Trochę teorii...</span>"
    ]
  },
  {
    "objectID": "trocheteorii.html#parę-rad-na-dobre-prezentacje",
    "href": "trocheteorii.html#parę-rad-na-dobre-prezentacje",
    "title": "2  Trochę teorii…",
    "section": "2.9 Parę rad na dobre prezentacje",
    "text": "2.9 Parę rad na dobre prezentacje\nEdward Tufte, prof z Yale, https://www.edwardtufte.com/\n\nPrezentuj dane “na bogato”.\nNie ukrywaj danych, pokazuj prawdę.\nNie używaj wykresów śmieciowych.\nPokazuj zmienność danych, a nie projektuj jej.\nWykres ma posiadać jak najmniejszy współczynnik kłamstwa (lie-factor).\nPowerpoint to zło!\n\n\n2.9.1 Współczynnik kłamstwa\nhttps://www.facebook.com/janinadaily/photos/a.1524649467770881/2836063543296127/?paipv=0&eav=AfbVIDx5un8ZOklKI9c-B1jP4nOoNa2QMmJmjoA-291JNNgM1L_NmoCGMS_mJOy4xjo&_rdr\n\nstosunek efektu widocznego na wykresie do efektu wykazywanego przez dane, na podstawie których ten wykres narysowaliśmy.\n\nhttps://infovis-wiki.net/wiki/Lie_Factor\n\n\n2.9.2 Współczynnik kłamstwa\n\n[Tufte, 1991] Edward Tufte, The Visual Display of Quantitative Information, Second Edition, Graphics Press, USA, 1991, p. 57 – 69.\n\\[\\operatorname{LieFactor} = \\frac{\\text{rozmiar efektu widocznego na wykresie}}{\\text{rozmiar efektu wynikającego z danych}}\\]\n\\[\\text{rozmiar efektu} = \\frac{|\\text{druga wartość}-\\text{pierwsza wartość}|}{\\text{pierwsza wartość}}\\]\n\n\\[\\operatorname{LieFactor} = \\frac{\\frac{5.3-0.6}{0.6}}{\\frac{27.5-18}{18}} \\approx 14.8\\]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Trochę teorii...</span>"
    ]
  },
  {
    "objectID": "trocheteorii.html#jak-tworzyć",
    "href": "trocheteorii.html#jak-tworzyć",
    "title": "2  Trochę teorii…",
    "section": "2.10 Jak tworzyć?",
    "text": "2.10 Jak tworzyć?\n\nhttps://bookdown.org/rudolf_von_ems/jak_sie_nie_dac/stats_graphs.html\nhttps://www.data-to-viz.com/\nhttps://100.datavizproject.com/",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Trochę teorii...</span>"
    ]
  },
  {
    "objectID": "trocheteorii.html#bibliografia",
    "href": "trocheteorii.html#bibliografia",
    "title": "2  Trochę teorii…",
    "section": "2.11 Bibliografia",
    "text": "2.11 Bibliografia\n\nhttps://pl.wikipedia.org/wiki/Wizualizacja\nhttps://mfiles.pl/pl/index.php/Analiza_danych, dostęp online 1.04.2019.\nWalesiak M., Gatnar E., Statystyczna analiza danych z wykorzystaniem programu R, PWN, Warszawa, 2009.\nWasilewska E., Statystyka opisowa od podstaw, Podręcznik z zadaniami, Wydawnictwo SGGW, Warszawa, 2009.\nhttps://en.wikipedia.org/wiki/Cognitive_reflection_test, dostęp online 20.03.2023.\nhttps://qlikblog.pl/edward-tufte-dobre-praktyki-prezentacji-danych/, dostęp online 20.03.2023.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Trochę teorii...</span>"
    ]
  },
  {
    "objectID": "numpy.html",
    "href": "numpy.html",
    "title": "3  NumPy",
    "section": "",
    "text": "3.1 Import biblioteki NumPy\nPodstawowym bytem w bibliotece NumPy jest N-wymiarowa tablica zwana ndarray. Każdy element na tablicy traktowany jest jako typ dtype.\nimport numpy as np\n\n1a = np.array([1, 2, 3])\nprint(\"a:\", a) \n2print(\"typ a:\", type(a))\n3b = np.array([1, 2, 3.0])\nprint(\"b:\", b)\n4c = np.array([[1, 2], [3, 4]])\nprint(\"c:\", c)\n5d = np.array([1, 2, 3], ndmin=2)\nprint(\"d:\", d)\n6e = np.array([1, 2, 3], dtype=complex)\nprint(\"e:\", e)\n7f = np.array(np.mat('1 2; 3 4'))\nprint(\"f:\", f)\n8g = np.array(np.mat('1 2; 3 4'), subok=True)\nprint(\"g:\", g)\nprint(type(g))\n\n\n1\n\nStandardowe domyślne.\n\n2\n\nSprawdzenie typu.\n\n3\n\nJeden z elementów jest innege typu. Tu następuje zatem rozszerzenie do typu “największego”.\n\n4\n\nTu otrzymamy tablicę 2x2.\n\n5\n\nW tej linijce otrzymana będzie tablica 2x1.\n\n6\n\nUstalenie innego typu - większego.\n\n7\n\nSkorzystanie z podtypu macierzowego.\n\n8\n\nZachowanie typu macierzowego.\n\n\n\n\na: [1 2 3]\ntyp a: &lt;class 'numpy.ndarray'&gt;\nb: [1. 2. 3.]\nc: [[1 2]\n [3 4]]\nd: [[1 2 3]]\ne: [1.+0.j 2.+0.j 3.+0.j]\nf: [[1 2]\n [3 4]]\ng: [[1 2]\n [3 4]]\n&lt;class 'numpy.matrix'&gt;",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#import-biblioteki-numpy",
    "href": "numpy.html#import-biblioteki-numpy",
    "title": "3  NumPy",
    "section": "",
    "text": "import numpy as np\n\nnumpy.array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None)\n\nobject - to co ma być wrzucone do tablicy\ndtype - typ\ncopy - czy obiekty mają być skopiowane, domyślne True\norder - sposób układania: C (rzędy), F (kolumny), A, K\nsubok - realizowane przez podklasy (jeśli True), domyślnie False\nndmin - minimalny rozmiar (wymiar) tablicy\nlike - tworzenie na podstawie tablic referencyjnej",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#lista-a-tablica",
    "href": "numpy.html#lista-a-tablica",
    "title": "3  NumPy",
    "section": "3.2 Lista a tablica",
    "text": "3.2 Lista a tablica\n\nimport numpy as np\nimport time\n\nstart_time = time.time()\nmy_arr = np.arange(1000000)\nmy_list = list(range(1000000))\nstart_time = time.time()\nmy_arr2 = my_arr * 2\nprint(\"--- %s seconds ---\" % (time.time() - start_time))\nstart_time = time.time()\nmy_list2 = [x * 2 for x in my_list]\nprint(\"--- %s seconds ---\" % (time.time() - start_time))\n\n--- 0.0 seconds ---\n--- 0.06189250946044922 seconds ---",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#atrybuty-tablic-ndarray",
    "href": "numpy.html#atrybuty-tablic-ndarray",
    "title": "3  NumPy",
    "section": "3.3 Atrybuty tablic ndarray",
    "text": "3.3 Atrybuty tablic ndarray\n\n\n\n\n\n\n\nAtrybut\nOpis\n\n\n\n\nshape\nkrotka z informacją liczbę elementów dla każdego z wymiarów\n\n\nsize\nliczba elementów w tablicy (łączna)\n\n\nndim\nliczba wymiarów tablicy\n\n\nnbytes\nliczba bajtów jaką tablica zajmuje w pamięci\n\n\ndtype\ntyp danych\n\n\n\nhttps://numpy.org/doc/stable/reference/arrays.ndarray.html#array-attributes\n\nimport numpy as np\n\ntab1 = np.array([2, -3, 4, -8, 1])\nprint(\"typ:\", type(tab1))\nprint(\"shape:\", tab1.shape)\nprint(\"size:\", tab1.size)\nprint(\"ndim:\", tab1.ndim)\nprint(\"nbytes:\", tab1.nbytes)\nprint(\"dtype:\", tab1.dtype)\n\ntyp: &lt;class 'numpy.ndarray'&gt;\nshape: (5,)\nsize: 5\nndim: 1\nnbytes: 20\ndtype: int32\n\n\n\nimport numpy as np\n\ntab2 = np.array([[2, -3], [4, -8]])\nprint(\"typ:\", type(tab2))\nprint(\"shape:\", tab2.shape)\nprint(\"size:\", tab2.size)\nprint(\"ndim:\", tab2.ndim)\nprint(\"nbytes:\", tab2.nbytes)\nprint(\"dtype:\", tab2.dtype)\n\ntyp: &lt;class 'numpy.ndarray'&gt;\nshape: (2, 2)\nsize: 4\nndim: 2\nnbytes: 16\ndtype: int32\n\n\nNumPy nie wspiera postrzępionych tablic! Poniższy kod wygeneruje błąd:\nimport numpy as np\n\ntab3 = np.array([[2, -3], [4, -8, 5], [3]])",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#typy-danych",
    "href": "numpy.html#typy-danych",
    "title": "3  NumPy",
    "section": "3.4 Typy danych",
    "text": "3.4 Typy danych\nhttps://numpy.org/doc/stable/reference/arrays.scalars.html\nhttps://numpy.org/doc/stable/reference/arrays.dtypes.html#arrays-dtypes-constructing\n\n\n\n\n\n\n\nTypy całkowitoliczbowe\nint,int8,int16,int32,int64\n\n\nTypy całkowitoliczbowe (bez znaku)\nuint,uint8,uint16,uint32,uint64\n\n\nTyp logiczny\nbool\n\n\nTypy zmiennoprzecinkowe\nfloat, float16, float32, float64, float128\n\n\nTypy zmiennoprzecinkowe zespolone\ncomplex, complex64, complex128, complex256\n\n\nNapis\nstr\n\n\n\n\nimport numpy as np\n\ntab = np.array([[2, -3], [4, -8]])\nprint(tab)\ntab2 = np.array([[2, -3], [4, -8]], dtype=int)\nprint(tab2)\ntab3 = np.array([[2, -3], [4, -8]], dtype=float)\nprint(tab3)\ntab4 = np.array([[2, -3], [4, -8]], dtype=complex)\nprint(tab4)\n\n[[ 2 -3]\n [ 4 -8]]\n[[ 2 -3]\n [ 4 -8]]\n[[ 2. -3.]\n [ 4. -8.]]\n[[ 2.+0.j -3.+0.j]\n [ 4.+0.j -8.+0.j]]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#tworzenie-tablic",
    "href": "numpy.html#tworzenie-tablic",
    "title": "3  NumPy",
    "section": "3.5 Tworzenie tablic",
    "text": "3.5 Tworzenie tablic\nnp.array - argumenty rzutowany na tablicę (coś po czym można iterować) - warto sprawdzić rozmiar/kształt\n\nimport numpy as np\n\ntab = np.array([2, -3, 4])\nprint(tab)\nprint(\"size:\", tab.size)\ntab2 = np.array((4, -3, 3, 2))\nprint(tab2)\nprint(\"size:\", tab2.size)\ntab3 = np.array({3, 3, 2, 5, 2})\nprint(tab3)\nprint(\"size:\", tab3.size)\ntab4 = np.array({\"pl\": 344, \"en\": 22})\nprint(tab4)\nprint(\"size:\", tab4.size)\n\n[ 2 -3  4]\nsize: 3\n[ 4 -3  3  2]\nsize: 4\n{2, 3, 5}\nsize: 1\n{'pl': 344, 'en': 22}\nsize: 1\n\n\nnp.zeros - tworzy tablicę wypełnioną zerami\n\nimport numpy as np\n\ntab = np.zeros(4)\nprint(tab)\nprint(tab.shape)\ntab2 = np.zeros([2, 3])\nprint(tab2)\nprint(tab2.shape)\ntab3 = np.zeros([2, 3, 4])\nprint(tab3)\nprint(tab3.shape)\n\n[0. 0. 0. 0.]\n(4,)\n[[0. 0. 0.]\n [0. 0. 0.]]\n(2, 3)\n[[[0. 0. 0. 0.]\n  [0. 0. 0. 0.]\n  [0. 0. 0. 0.]]\n\n [[0. 0. 0. 0.]\n  [0. 0. 0. 0.]\n  [0. 0. 0. 0.]]]\n(2, 3, 4)\n\n\nnp.ones - tworzy tablicę wypełnioną jedynkami (to nie odpowiednik macierzy jednostkowej!)\n\nimport numpy as np\n\ntab = np.ones(4)\nprint(tab)\nprint(tab.shape)\ntab2 = np.ones([2, 3])\nprint(tab2)\nprint(tab2.shape)\ntab3 = np.ones([2, 3, 4])\nprint(tab3)\nprint(tab3.shape)\n\n[1. 1. 1. 1.]\n(4,)\n[[1. 1. 1.]\n [1. 1. 1.]]\n(2, 3)\n[[[1. 1. 1. 1.]\n  [1. 1. 1. 1.]\n  [1. 1. 1. 1.]]\n\n [[1. 1. 1. 1.]\n  [1. 1. 1. 1.]\n  [1. 1. 1. 1.]]]\n(2, 3, 4)\n\n\nnp.diag - tworzy tablicę odpowiadającą macierzy diagonalnej\n\nimport numpy as np\n\nprint(\"tab0\")\ntab0 = np.diag([3, 4, 5])\nprint(tab0)\nprint(\"tab1\")\ntab1 = np.array([[2, 3, 4], [3, -4, 5], [3, 4, -5]])\nprint(tab1)\ntab2 = np.diag(tab1)\nprint(\"tab2\")\nprint(tab2)\ntab3 = np.diag(tab1, k=1)\nprint(\"tab3\")\nprint(tab3)\nprint(\"tab4\")\ntab4 = np.diag(tab1, k=-2)\nprint(tab4)\nprint(\"tab5\")\ntab5 = np.diag(np.diag(tab1))\nprint(tab5)\n\ntab0\n[[3 0 0]\n [0 4 0]\n [0 0 5]]\ntab1\n[[ 2  3  4]\n [ 3 -4  5]\n [ 3  4 -5]]\ntab2\n[ 2 -4 -5]\ntab3\n[3 5]\ntab4\n[3]\ntab5\n[[ 2  0  0]\n [ 0 -4  0]\n [ 0  0 -5]]\n\n\nnp.arange - tablica wypełniona równomiernymi wartościami\nSkładnia: numpy.arange([start, ]stop, [step, ]dtype=None)\nZasada działania jest podobna jak w funkcji range, ale dopuszczamy liczby “z ułamkiem”.\n\nimport numpy as np\n\na = np.arange(3)\nprint(a)\nb = np.arange(3.0)\nprint(b)\nc = np.arange(3, 7)\nprint(c)\nd = np.arange(3, 11, 2)\nprint(d)\ne = np.arange(0, 1, 0.1)\nprint(e)\nf = np.arange(3, 11, 2, dtype=float)\nprint(f)\ng = np.arange(3, 10, 2)\nprint(g)\n\n[0 1 2]\n[0. 1. 2.]\n[3 4 5 6]\n[3 5 7 9]\n[0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9]\n[3. 5. 7. 9.]\n[3 5 7 9]\n\n\nnp.linspace - tablica wypełniona równomiernymi wartościami wg skali liniowej\n\nimport numpy as np\n\na = np.linspace(2.0, 3.0, num=5)\nprint(a)\nb = np.linspace(2.0, 3.0, num=5, endpoint=False)\nprint(b)\nc = np.linspace(10, 20, num=4)\nprint(c)\nd = np.linspace(10, 20, num=4, dtype=int)\nprint(d)\n\n[2.   2.25 2.5  2.75 3.  ]\n[2.  2.2 2.4 2.6 2.8]\n[10.         13.33333333 16.66666667 20.        ]\n[10 13 16 20]\n\n\n\nnp.logspace - tablica wypełniona wartościami wg skali logarytmicznej\nSkładnia: numpy.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0)\n\nimport numpy as np\n\na = np.logspace(2.0, 3.0, num=4)\nprint(a)\nb = np.logspace(2.0, 3.0, num=4, endpoint=False)\nprint(b)\nc = np.logspace(2.0, 3.0, num=4, base=2.0)\nprint(c)\n\n[ 100.          215.443469    464.15888336 1000.        ]\n[100.         177.827941   316.22776602 562.34132519]\n[4.         5.0396842  6.34960421 8.        ]\n\n\n\nnp.empty - pusta (niezaincjowana) tablica - konkretne wartości nie są “gwarantowane”\n\nimport numpy as np\n\na = np.empty(3)\nprint(a)\nb = np.empty(3, dtype=int)\nprint(b)\n\n[0. 1. 2.]\n[0 1 2]\n\n\nnp.identity - tablica przypominająca macierz jednostkową\nnp.eye - tablica z jedynkami na przekątnej (pozostałe zera)\n\nimport numpy as np\n\nprint(\"a\")\na = np.identity(4)\nprint(a)\nprint(\"b\")\nb = np.eye(4, k=1)\nprint(b)\nprint(\"c\")\nc = np.eye(4, k=2)\nprint(c)\nprint(\"d\")\nd = np.eye(4, k=-1)\nprint(d)\n\na\n[[1. 0. 0. 0.]\n [0. 1. 0. 0.]\n [0. 0. 1. 0.]\n [0. 0. 0. 1.]]\nb\n[[0. 1. 0. 0.]\n [0. 0. 1. 0.]\n [0. 0. 0. 1.]\n [0. 0. 0. 0.]]\nc\n[[0. 0. 1. 0.]\n [0. 0. 0. 1.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]]\nd\n[[0. 0. 0. 0.]\n [1. 0. 0. 0.]\n [0. 1. 0. 0.]\n [0. 0. 1. 0.]]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#indeksowanie-krojenie",
    "href": "numpy.html#indeksowanie-krojenie",
    "title": "3  NumPy",
    "section": "3.6 Indeksowanie, “krojenie”",
    "text": "3.6 Indeksowanie, “krojenie”\n\nimport numpy as np\n\na = np.array([2, 5, -2, 4, -7, 8, 9, 11, -23, -4, -7, 16, 1])\n1print(\"1:\", a[5])\n2print(\"2:\", a[-2])\n3print(\"3:\", a[3:6])\n4print(\"4:\", a[:])\n5print(\"5:\", a[0:-1])\n6print(\"6:\", a[:5])\n\n\n1\n\nDostęp do elementu o indeksie 5.\n\n2\n\nDostęp do elementu drugiego od tyłu.\n\n3\n\nDostęp do elementów o indeksach od 3 do 5 (włącznie) - zasada przedziałów lewostronnnie domkniętnych, prawostronnie otwartych.\n\n4\n\nDostęp do wszystkich elementów.\n\n5\n\nDostęp do wszystkich elementów z wyłączeniem ostatniego.\n\n6\n\nDostęp od początku do elementu o indeksie 4.\n\n\n\n\n1: 8\n2: 16\n3: [ 4 -7  8]\n4: [  2   5  -2   4  -7   8   9  11 -23  -4  -7  16   1]\n5: [  2   5  -2   4  -7   8   9  11 -23  -4  -7  16]\n6: [ 2  5 -2  4 -7]\n\n\n\nimport numpy as np\n\n1print(\"1:\", a[4:])\n2print(\"2:\", a[4:-1])\n3print(\"3:\", a[4:10:2])\n4print(\"4:\", a[::-1])\n5print(\"5:\", a[::2])\n6print(\"6:\", a[::-2])\n\n\n1\n\nDostęp do elementów od indeksu 4 do końca.\n\n2\n\nDostęp do elementów od indeksu 4 do końca bez ostatniego.\n\n3\n\nDostęp do elementów o indeksach stanowiących ciąg arytmetyczny od 4 do 10 (z czówrką, ale bez dziesiątki) z krokiem równym 2\n\n4\n\nDostęp do elementów od tyłu do początku.\n\n5\n\nDostęp do elementów o indeksach parzystych od początku.\n\n6\n\nDostęp do elementów o indeksach “nieparzystych ujemnych” od początku.\n\n\n\n\n1: [ -7   8   9  11 -23  -4  -7  16   1]\n2: [ -7   8   9  11 -23  -4  -7  16]\n3: [ -7   9 -23]\n4: [  1  16  -7  -4 -23  11   9   8  -7   4  -2   5   2]\n5: [  2  -2  -7   9 -23  -7   1]\n6: [  1  -7 -23   9  -7  -2   2]\n\n\n\nimport numpy as np\n\na = np.array([[3, 4, 5], [-3, 4, 8], [3, 2, 9]])\nb = a[:2, 1:]\nprint(b)\nprint(np.shape(b))\nc = a[1]\nprint(c)\nprint(np.shape(c))\nd = a[1, :]\nprint(d)\nprint(np.shape(d))\n\n[[4 5]\n [4 8]]\n(2, 2)\n[-3  4  8]\n(3,)\n[-3  4  8]\n(3,)\n\n\n\nimport numpy as np\n\na = np.array([[3, 4, 5], [-3, 4, 8], [3, 2, 9]])\ne = a[1:2, :]\nprint(e)\nprint(np.shape(e))\nf = a[:, :2]\nprint(f)\nprint(np.shape(f))\ng = a[1, :2]\nprint(g)\nprint(np.shape(g))\nh = a[1:2, :2]\nprint(h)\nprint(np.shape(h))\n\n[[-3  4  8]]\n(1, 3)\n[[ 3  4]\n [-3  4]\n [ 3  2]]\n(3, 2)\n[-3  4]\n(2,)\n[[-3  4]]\n(1, 2)\n\n\n**Uwaga - takie “krojenie” to tzw “widok”.\n\nimport numpy as np\n\na = np.array([[3, 4, 5], [-3, 4, 8], [3, 2, 9]])\nb = a[1:2, 1:]\nprint(b)\na[1][1] = 9\nprint(a)\nprint(b)\nb[0][0] = -11\nprint(a)\nprint(b)\n\n[[4 8]]\n[[ 3  4  5]\n [-3  9  8]\n [ 3  2  9]]\n[[9 8]]\n[[  3   4   5]\n [ -3 -11   8]\n [  3   2   9]]\n[[-11   8]]\n\n\nNaprawa:\n\nimport numpy as np\n\na = np.array([[3, 4, 5], [-3, 4, 8], [3, 2, 9]])\nb = a[1:2, 1:].copy()\nprint(b)\na[1][1] = 9\nprint(a)\nprint(b)\nb[0][0] = -11\nprint(a)\nprint(b)\n\n[[4 8]]\n[[ 3  4  5]\n [-3  9  8]\n [ 3  2  9]]\n[[4 8]]\n[[ 3  4  5]\n [-3  9  8]\n [ 3  2  9]]\n[[-11   8]]\n\n\nIndeksowanie logiczne (fancy indexing)\n\nimport numpy as np\n\na = np.array([2, 5, -2, 4, -7, 8, 9, 11, -23, -4, -7, 8, 1])\nb = a[np.array([1, 3, 7])]\nprint(b)\nc = a[[1, 3, 7]]\nprint(c)\n\n[ 5  4 11]\n[ 5  4 11]\n\n\n\nimport numpy as np\n\na = np.array([2, 5, -2, 4, -7, 8, 9, 11, -23, -4, -7, 8, 1])\nb = a &gt; 0\nprint(b)\nc = a[a &gt; 0]\nprint(c)\n\n[ True  True False  True False  True  True  True False False False  True\n  True]\n[ 2  5  4  8  9 11  8  1]\n\n\n\nimport numpy as np\n\na = np.array([2, 5, -2, 4, -7, 8, 9, 11, -23, -4, -7, 8, 1])\nb = a[a &gt; 0]\nprint(b)\nb[0] = -5\nprint(a)\nprint(b)\na[1] = 20\nprint(a)\nprint(b)\n\n[ 2  5  4  8  9 11  8  1]\n[  2   5  -2   4  -7   8   9  11 -23  -4  -7   8   1]\n[-5  5  4  8  9 11  8  1]\n[  2  20  -2   4  -7   8   9  11 -23  -4  -7   8   1]\n[-5  5  4  8  9 11  8  1]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#modyfikacja-kształtu-i-rozmiaru",
    "href": "numpy.html#modyfikacja-kształtu-i-rozmiaru",
    "title": "3  NumPy",
    "section": "3.7 Modyfikacja kształtu i rozmiaru",
    "text": "3.7 Modyfikacja kształtu i rozmiaru\nhttps://numpy.org/doc/stable/reference/routines.array-manipulation.html\n\nimport numpy as np\n\nprint(\"a\")\na = np.array([[3, 4, 5], [-3, 4, 8], [3, 2, 9]])\nprint(a)\nprint(\"b\")\nb = np.reshape(a, (1, 9))\nprint(b)\nprint(\"c\")\nc = a.reshape(9)\nprint(c)\n\na\n[[ 3  4  5]\n [-3  4  8]\n [ 3  2  9]]\nb\n[[ 3  4  5 -3  4  8  3  2  9]]\nc\n[ 3  4  5 -3  4  8  3  2  9]\n\n\n\nimport numpy as np\n\nprint(\"a\")\na = np.array([[3, 4, 5], [-3, 4, 8], [3, 2, 9]])\nprint(a)\nprint(\"d\")\nd = a.flatten()\nprint(d)\nprint(\"e\")\ne = a.ravel()\nprint(e)\nprint(\"f\")\nf = np.ravel(a)\nprint(f)\n\na\n[[ 3  4  5]\n [-3  4  8]\n [ 3  2  9]]\nd\n[ 3  4  5 -3  4  8  3  2  9]\ne\n[ 3  4  5 -3  4  8  3  2  9]\nf\n[ 3  4  5 -3  4  8  3  2  9]\n\n\n\nimport numpy as np\n\nprint(\"g\")\ng = [[1, 3, 4]]\nprint(g)\nprint(\"h\")\nh = np.squeeze(g)\nprint(h)\nprint(\"i\")\ni = a.T\nprint(i)\nprint(\"j\")\nj = np.transpose(a)\nprint(j)\n\ng\n[[1, 3, 4]]\nh\n[1 3 4]\ni\n[[ 3 -3  3]\n [ 4  4  2]\n [ 5  8  9]]\nj\n[[ 3 -3  3]\n [ 4  4  2]\n [ 5  8  9]]\n\n\n\nimport numpy as np\n\nprint(\"h\")\nh = [3, -4, 5, -2]\nprint(h)\nprint(\"k\")\nk = np.hstack((h, h, h))\nprint(k)\nprint(\"l\")\nl = np.vstack((h, h, h))\nprint(l)\nprint(\"m\")\nm = np.dstack((h, h, h))\nprint(m)\n\nh\n[3, -4, 5, -2]\nk\n[ 3 -4  5 -2  3 -4  5 -2  3 -4  5 -2]\nl\n[[ 3 -4  5 -2]\n [ 3 -4  5 -2]\n [ 3 -4  5 -2]]\nm\n[[[ 3  3  3]\n  [-4 -4 -4]\n  [ 5  5  5]\n  [-2 -2 -2]]]\n\n\n\nimport numpy as np\n\na = np.array([[1, 2], [3, 4]])\nb = np.array([[5, 6]])\nprint(\"r1\")\nr1 = np.concatenate((a, b))\nprint(r1)\nprint(\"r2\")\nr2 = np.concatenate((a, b), axis=0)\nprint(r2)\nprint(\"r3\")\nr3 = np.concatenate((a, b.T), axis=1)\nprint(r3)\nprint(\"r4\")\nr4 = np.concatenate((a, b), axis=None)\nprint(r4)\n\nr1\n[[1 2]\n [3 4]\n [5 6]]\nr2\n[[1 2]\n [3 4]\n [5 6]]\nr3\n[[1 2 5]\n [3 4 6]]\nr4\n[1 2 3 4 5 6]\n\n\n\nimport numpy as np\n\na = np.array([[1, 2], [3, 4]])\nprint(\"r1\")\nr1 = np.resize(a, (2, 3))\nprint(r1)\nprint(\"r2\")\nr2 = np.resize(a, (1, 4))\nprint(r2)\nprint(\"r3\")\nr3 = np.resize(a, (2, 4))\nprint(r3)\n\nr1\n[[1 2 3]\n [4 1 2]]\nr2\n[[1 2 3 4]]\nr3\n[[1 2 3 4]\n [1 2 3 4]]\n\n\n\nimport numpy as np\n\na = np.array([[1, 2], [3, 4]])\nb = np.array([[5, 6]])\nprint(\"r1\")\nr1 = np.append(a, b)\nprint(r1)\nprint(\"r2\")\nr2 = np.append(a, b, axis=0)\nprint(r2)\n\nr1\n[1 2 3 4 5 6]\nr2\n[[1 2]\n [3 4]\n [5 6]]\n\n\n\nimport numpy as np\n\na = np.array([[1, 2], [3, 7]])\nprint(\"r1\")\nr1 = np.insert(a, 1, 4)\nprint(r1)\nprint(\"r2\")\nr2 = np.insert(a, 2, 4)\nprint(r2)\nprint(\"r3\")\nr3 = np.insert(a, 1, 4, axis=0)\nprint(r3)\nprint(\"r4\")\nr4 = np.insert(a, 1, 4, axis=1)\nprint(r4)\n\nr1\n[1 4 2 3 7]\nr2\n[1 2 4 3 7]\nr3\n[[1 2]\n [4 4]\n [3 7]]\nr4\n[[1 4 2]\n [3 4 7]]\n\n\n\nimport numpy as np\n\na = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\nprint(\"r1\")\nr1 = np.delete(a, 1, axis=1)\nprint(r1)\nprint(\"r2\")\nr2 = np.delete(a, 2, axis=0)\nprint(r2)\n\nr1\n[[ 1  3  4]\n [ 5  7  8]\n [ 9 11 12]]\nr2\n[[1 2 3 4]\n [5 6 7 8]]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#broadcasting",
    "href": "numpy.html#broadcasting",
    "title": "3  NumPy",
    "section": "3.8 Broadcasting",
    "text": "3.8 Broadcasting\nRozważane warianty są przykładowe.\nWariant 1 - skalar-tablica - wykonanie operacji na każdym elemencie tablicy\n\nimport numpy as np\n\na = np.array([[1, 2], [5, 6], [9, 10]])\nb = a + 4\nprint(b)\nc = 2 ** a\nprint(c)\n\n[[ 5  6]\n [ 9 10]\n [13 14]]\n[[   2    4]\n [  32   64]\n [ 512 1024]]\n\n\n\nWariant 2 - dwie tablice - “gdy jedna z tablic może być rozszerzona” (oba wymiary są równe lub jeden z nich jest równy 1)\nhttps://numpy.org/doc/stable/user/basics.broadcasting.html\n\nimport numpy as np\n\na = np.array([[1, 2], [5, 6]])\nb = np.array([9, 2])\nr1 = a + b\nprint(r1)\nr2 = a / b\nprint(r2)\nc = np.array([[4], [-2]])\nr3 = a + c\nprint(r3)\nr4 = c / a\nprint(r4)\n\n[[10  4]\n [14  8]]\n[[0.11111111 1.        ]\n [0.55555556 3.        ]]\n[[5 6]\n [3 4]]\n[[ 4.          2.        ]\n [-0.4        -0.33333333]]\n\n\n\nWariant 3 - “kolumna” i “wiersz”\n\nimport numpy as np\n\na = np.array([[5, 2, -3]]).T\nb = np.array([3, -2, 1, 2, 4])\nprint(a+b)\nprint(b+a)\nprint(a*b)\n\n[[ 8  3  6  7  9]\n [ 5  0  3  4  6]\n [ 0 -5 -2 -1  1]]\n[[ 8  3  6  7  9]\n [ 5  0  3  4  6]\n [ 0 -5 -2 -1  1]]\n[[ 15 -10   5  10  20]\n [  6  -4   2   4   8]\n [ -9   6  -3  -6 -12]]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#funkcje-uniwersalne",
    "href": "numpy.html#funkcje-uniwersalne",
    "title": "3  NumPy",
    "section": "3.9 Funkcje uniwersalne",
    "text": "3.9 Funkcje uniwersalne\nhttps://numpy.org/doc/stable/reference/ufuncs.html#methods",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#statystyka-i-agregacja",
    "href": "numpy.html#statystyka-i-agregacja",
    "title": "3  NumPy",
    "section": "3.10 Statystyka i agregacja",
    "text": "3.10 Statystyka i agregacja\n\n\n\n\n\n\n\nFunkcja\nOpis\n\n\n\n\nnp.mean\nŚrednia wszystkich wartości w tablicy.\n\n\nnp.std\nOdchylenie standardowe.\n\n\nnp.var\nWariancja.\n\n\nnp.sum\nSuma wszystkich elementów.\n\n\nnp.prod\nIloczyn wszystkich elementów.\n\n\nnp.cumsum\nSkumulowana suma wszystkich elementów.\n\n\nnp.cumprod\nSkumulowany iloczyn wszystkich elementów.\n\n\nnp.min,np.max\nMinimalna/maksymalna wartość w tablicy.\n\n\nnp.argmin, np.argmax\nIndeks minimalnej/maksymalnej wartości w tablicy.\n\n\nnp.all\nSprawdza czy wszystki elementy są różne od zera.\n\n\nnp.any\nSprawdza czy co najmniej jeden z elementów jest różny od zera.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#wyrażenia-warunkowe",
    "href": "numpy.html#wyrażenia-warunkowe",
    "title": "3  NumPy",
    "section": "3.11 Wyrażenia warunkowe",
    "text": "3.11 Wyrażenia warunkowe\nhttps://numpy.org/doc/stable/reference/generated/numpy.where https://numpy.org/doc/stable/reference/generated/numpy.choose https://numpy.org/doc/stable/reference/generated/numpy.select https://numpy.org/doc/stable/reference/generated/numpy.nonzero",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#działania-na-zbiorach",
    "href": "numpy.html#działania-na-zbiorach",
    "title": "3  NumPy",
    "section": "3.12 Działania na zbiorach",
    "text": "3.12 Działania na zbiorach\nhttps://numpy.org/doc/stable/reference/routines.set.html",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#operacje-tablicowe",
    "href": "numpy.html#operacje-tablicowe",
    "title": "3  NumPy",
    "section": "3.13 Operacje tablicowe",
    "text": "3.13 Operacje tablicowe\nhttps://numpy.org/doc/stable/reference/generated/numpy.transpose\nhttps://numpy.org/doc/stable/reference/generated/numpy.flip https://numpy.org/doc/stable/reference/generated/numpy.fliplr https://numpy.org/doc/stable/reference/generated/numpy.flipud\nhttps://numpy.org/doc/stable/reference/generated/numpy.sort",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#alegbra-liniowa",
    "href": "numpy.html#alegbra-liniowa",
    "title": "3  NumPy",
    "section": "3.14 Alegbra liniowa",
    "text": "3.14 Alegbra liniowa\nhttps://numpy.org/doc/stable/reference/routines.linalg.html",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#funkcja-na-stringach",
    "href": "numpy.html#funkcja-na-stringach",
    "title": "3  NumPy",
    "section": "3.15 Funkcja na stringach",
    "text": "3.15 Funkcja na stringach\nhttps://numpy.org/doc/stable/reference/routines.char.html",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#data-i-czas",
    "href": "numpy.html#data-i-czas",
    "title": "3  NumPy",
    "section": "3.16 Data i czas",
    "text": "3.16 Data i czas\nhttps://numpy.org/doc/stable/reference/arrays.datetime.html",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy.html#pseudolosowe",
    "href": "numpy.html#pseudolosowe",
    "title": "3  NumPy",
    "section": "3.17 Pseudolosowe",
    "text": "3.17 Pseudolosowe\nhttps://numpy.org/doc/stable/reference/random/index.html\nBibliografia:\n\nDokumentacja biblioteki, https://numpy.org/doc/stable/, dostęp online 5.03.2021.\nRobert Jahansson, Matematyczny Python. Obliczenia naukowe i analiza danych z użyciem NumPy, SciPy i Matplotlib, Wyd. Helion, 2021.\nhttps://www.tutorialspoint.com/numpy/index.htm, dostęp online 20.03.2019.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NumPy</span>"
    ]
  },
  {
    "objectID": "numpy-zadania.html",
    "href": "numpy-zadania.html",
    "title": "4  NumPy - zadania",
    "section": "",
    "text": "Utwórz tablicę NumPy o wymiarach 3x2, a następnie zmień jej kształt na 2x3 bez zmiany danych.\nDla danej tablicy NumPy zawierającej co najmniej 10 elementów, wykonaj indeksowanie, aby uzyskać trzeci element, a następnie “krojenie”, aby uzyskać elementy od trzeciego do szóstego.\nUtwórz tablicę zawierającą 10 równo rozmieszczonych punktów między 0 a 100. Następnie, wykorzystując utworzoną tablicę, oblicz wartości funkcji kwadratowej \\(y = x^2\\) dla każdego punktu. Wyniki zapisz w nowej tablicy.\nWygeneruj tablicę zawierającą 20 punktów równomiernie rozłożonych w zakresie od \\(\\pi\\) do \\(2\\pi\\) i użyj tej tablicy do obliczenia i wyświetlenia sinusa dla każdego punktu. Wyniki zapisz w osobnej tablicy.\nStwórz tablicę składającą się z 15 punktów równomiernie rozłożonych między -5 a 5. Następnie, na podstawie tej tablicy, utwórz dwie nowe tablice: jedną zawierającą wartości funkcji eksponencjalnej \\(e^x\\) dla każdego z punktów, a drugą zawierającą logarytm naturalny dla tych punktów, gdzie punkty równoznaczne z wartością mniejszą lub równą 0 są pomijane.\nStwórz tablicę logArray, używając funkcji logspace, która zawiera 30 punktów rozłożonych logarytmicznie między \\(10^1\\) a \\(10^5\\). Następnie oblicz średnią wartość wszystkich elementów w tej tablicy.\nWygeneruj tablicę frequencies, korzystając z funkcji logspace, aby otrzymać 25 punktów logarytmicznie równomiernie rozłożonych między częstotliwościami \\(10^2\\) Hz a \\(10^6\\) Hz. Użyj tej tablicy do symulacji wartości pewnego sygnału w zależności od częstotliwości i zapisz wyniki w nowej tablicy signalValues.\nKorzystając z funkcji logspace, utwórz tablicę resistances reprezentującą wartości rezystancji, które są rozłożone logarytmicznie w zakresie od \\(1\\Omega\\) do \\(1M\\Omega\\) włącznie, z 40 punktami.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>NumPy - zadania</span>"
    ]
  },
  {
    "objectID": "pandas.html",
    "href": "pandas.html",
    "title": "5  Pandas",
    "section": "",
    "text": "5.1 Podstawowe byty\nSeria - Series\nRamka danych - DataFrame\nimport pandas as pd\nimport numpy as np\n\ns = pd.Series([3, -5, 7, 4])\nprint(s)\nprint(\"values\")\nprint(s.values)\nprint(type(s.values))\nt = np.sort(s.values)\nprint(t)\nprint(s.index)\nprint(type(s.index))\n\n0    3\n1   -5\n2    7\n3    4\ndtype: int64\nvalues\n[ 3 -5  7  4]\n&lt;class 'numpy.ndarray'&gt;\n[-5  3  4  7]\nRangeIndex(start=0, stop=4, step=1)\n&lt;class 'pandas.core.indexes.range.RangeIndex'&gt;\nimport pandas as pd\nimport numpy as np\n\ns = pd.Series([3, -5, 7, 4], index=['a', 'b', 'c', 'd'])\nprint(s)\nprint(s['b'])\ns['b'] = 8\nprint(s)\nprint(s[s &gt; 5])\nprint(s * 2)\nprint(np.sin(s))\n\na    3\nb   -5\nc    7\nd    4\ndtype: int64\n-5\na    3\nb    8\nc    7\nd    4\ndtype: int64\nb    8\nc    7\ndtype: int64\na     6\nb    16\nc    14\nd     8\ndtype: int64\na    0.141120\nb    0.989358\nc    0.656987\nd   -0.756802\ndtype: float64\nimport pandas as pd\n\nd = {'key1': 350, 'key2': 700, 'key3': 70}\ns = pd.Series(d)\nprint(s)\n\nkey1    350\nkey2    700\nkey3     70\ndtype: int64\nimport pandas as pd\n\nd = {'key1': 350, 'key2': 700, 'key3': 70}\nk = ['key0', 'key2', 'key3', 'key1']\ns = pd.Series(d, index=k)\nprint(s)\npd.isnull(s)\npd.notnull(s)\ns.isnull()\ns.notnull()\ns.name = \"Wartosc\"\ns.index.name = \"Klucz\"\nprint(s)\n\nkey0      NaN\nkey2    700.0\nkey3     70.0\nkey1    350.0\ndtype: float64\nKlucz\nkey0      NaN\nkey2    700.0\nkey3     70.0\nkey1    350.0\nName: Wartosc, dtype: float64\nimport pandas as pd\n\ndata = {'Country': ['Belgium', 'India', 'Brazil'],\n        'Capital': ['Brussels', 'New Delhi', 'Brasília'],\n        'Population': [11190846, 1303171035, 207847528]}\nframe = pd.DataFrame(data)\nprint(frame)\ndf = pd.DataFrame(data, columns=['Country', 'Population', 'Capital'])\nprint(df)\n\n   Country    Capital  Population\n0  Belgium   Brussels    11190846\n1    India  New Delhi  1303171035\n2   Brazil   Brasília   207847528\n   Country  Population    Capital\n0  Belgium    11190846   Brussels\n1    India  1303171035  New Delhi\n2   Brazil   207847528   Brasília\nimport pandas as pd\n\ndata = {'Country': ['Belgium', 'India', 'Brazil'],\n        'Capital': ['Brussels', 'New Delhi', 'Brasília'],\n        'Population': [11190846, 1303171035, 207847528]}\ndf = pd.DataFrame(data, columns=['Country', 'Population', 'Capital'])\nprint(df.iloc[[0], [0]])\nprint(\"--\")\nprint(df.loc[[0], ['Country']])\nprint(\"--\")\nprint(df.loc[2])\nprint(\"--\")\nprint(df.loc[:, 'Capital'])\nprint(\"--\")\nprint(df.loc[1, 'Capital'])\n\n   Country\n0  Belgium\n--\n   Country\n0  Belgium\n--\nCountry          Brazil\nPopulation    207847528\nCapital        Brasília\nName: 2, dtype: object\n--\n0     Brussels\n1    New Delhi\n2     Brasília\nName: Capital, dtype: object\n--\nNew Delhi\nimport pandas as pd\n\ndata = {'Country': ['Belgium', 'India', 'Brazil'],\n        'Capital': ['Brussels', 'New Delhi', 'Brasília'],\n        'Population': [11190846, 1303171035, 207847528]}\ndf = pd.DataFrame(data, columns=['Country', 'Population', 'Capital'])\nprint(df['Population'])       \nprint(\"--\")\nprint(df[df['Population'] &gt; 1200000000])\nprint(\"--\")\nprint(df.drop('Country', axis=1))\nprint(\"--\")\n\n0      11190846\n1    1303171035\n2     207847528\nName: Population, dtype: int64\n--\n  Country  Population    Capital\n1   India  1303171035  New Delhi\n--\n   Population    Capital\n0    11190846   Brussels\n1  1303171035  New Delhi\n2   207847528   Brasília\n--\nimport pandas as pd\n\ndata = {'Country': ['Belgium', 'India', 'Brazil'],\n        'Capital': ['Brussels', 'New Delhi', 'Brasília'],\n        'Population': [11190846, 1303171035, 207847528]}\ndf = pd.DataFrame(data, columns=['Country', 'Population', 'Capital'])\nprint(\"Shape:\", df.shape)\nprint(\"--\")\nprint(\"Index:\", df.index)\nprint(\"--\")\nprint(\"columns:\", df.columns)\nprint(\"--\")\ndf.info()\nprint(\"--\")\nprint(df.count())\n\nShape: (3, 3)\n--\nIndex: RangeIndex(start=0, stop=3, step=1)\n--\ncolumns: Index(['Country', 'Population', 'Capital'], dtype='object')\n--\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 3 entries, 0 to 2\nData columns (total 3 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   Country     3 non-null      object\n 1   Population  3 non-null      int64 \n 2   Capital     3 non-null      object\ndtypes: int64(1), object(2)\nmemory usage: 204.0+ bytes\n--\nCountry       3\nPopulation    3\nCapital       3\ndtype: int64",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "pandas.html#podstawowe-byty",
    "href": "pandas.html#podstawowe-byty",
    "title": "5  Pandas",
    "section": "",
    "text": "loc:\n\n\nTo metoda indeksowania oparta na etykietach, co oznacza, że używa nazw etykiet kolumn i indeksów wierszy do wyboru danych.\nDziała na podstawie etykiet indeksu oraz etykiet kolumny, co pozwala na wygodniejsze filtrowanie danych.\nObsługuje zarówno jednostkowe etykiety, jak i zakresy etykiet.\nDziała również z etykietami nieliczbowymi.\nPrzykład użycia: df.loc[1:3, ['A', 'B']] - zwraca wiersze od indeksu 1 do 3 (włącznie) oraz kolumny ‘A’ i ‘B’.\n\n\niloc:\n\n\nTo metoda indeksowania oparta na pozycji, co oznacza, że używa liczbowych indeksów kolumn i wierszy do wyboru danych.\nDziała na podstawie liczbowych indeksów zarówno dla wierszy, jak i kolumn.\nObsługuje jednostkowe indeksy oraz zakresy indeksów.\nW przypadku używania zakresów indeksów, zakres jest półotwarty, co oznacza, że prawy kraniec nie jest uwzględniany.\nPrzykład użycia: df.iloc[1:3, 0:2] - zwraca wiersze od indeksu 1 do 3 (bez 3) oraz kolumny od indeksu 0 do 2 (bez 2).",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "pandas.html#uzupełnianie-braków",
    "href": "pandas.html#uzupełnianie-braków",
    "title": "5  Pandas",
    "section": "5.2 Uzupełnianie braków",
    "text": "5.2 Uzupełnianie braków\n\nimport pandas as pd\n\ns = pd.Series([3, -5, 7, 4], index=['a', 'b', 'c', 'd'])\ns2 = pd.Series([7, -2, 3], index=['a', 'c', 'd'])\nprint(s + s2)\nprint(\"--\")\nprint(s.add(s2, fill_value=0))\nprint(\"--\")\nprint(s.mul(s2, fill_value=2))\n\na    10.0\nb     NaN\nc     5.0\nd     7.0\ndtype: float64\n--\na    10.0\nb    -5.0\nc     5.0\nd     7.0\ndtype: float64\n--\na    21.0\nb   -10.0\nc   -14.0\nd    12.0\ndtype: float64",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "pandas.html#obsługa-plików-csv",
    "href": "pandas.html#obsługa-plików-csv",
    "title": "5  Pandas",
    "section": "5.3 Obsługa plików csv",
    "text": "5.3 Obsługa plików csv\nFunkcja pandas.read_csv\nDokumentacja: link\nWybrane argumenty:\n\nfilepath - ścieżka dostępu\nsep=_NoDefault.no_default, delimiter=None - separator\nheader='infer' - nagłówek - domyślnie nazwy kolumn, ew. header=None oznacza brak nagłówka\nindex_col=None - ustalenie kolumny na indeksy (nazwy wierszy)\nthousands=None - separator tysięczny\ndecimal='.' - separator dziesiętny\n\nZapis pandas.DataFrame.to_csv\nDokumentacja: link",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "pandas.html#obsługa-plików-z-excela",
    "href": "pandas.html#obsługa-plików-z-excela",
    "title": "5  Pandas",
    "section": "5.4 Obsługa plików z Excela",
    "text": "5.4 Obsługa plików z Excela\nFunkcja pandas.read_excel\nhttps://pandas.pydata.org/docs/reference/api/pandas.read_excel.html\n** Ważne: trzeba zainstalować bibliotekę openpyxl do importu .xlsx oraz xlrd do importu .xls (nie trzeba ich importować w kodzie jawnie w większości wypadków)\nWybrane argumenty:\n\nio - ścieżka dostępu\nsheet_name=0 - nazwa arkusza\nheader='infer' - nagłówek - domyślnie nazwy kolumn, ew. header=None oznacza brak nagłówka\nindex_col=None - ustalenie kolumny na indeksy (nazwy wierszy)\nthousands=None - separator tysięczny\ndecimal='.' - separator dziesiętny",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "pandas.html#repozytorium-z-testowymi-plikami",
    "href": "pandas.html#repozytorium-z-testowymi-plikami",
    "title": "5  Pandas",
    "section": "5.5 Repozytorium z testowymi plikami",
    "text": "5.5 Repozytorium z testowymi plikami\n\nhttps://github.com/pjastr/SamleTestFilesVD",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "pandas.html#operacje-manipulacyjne",
    "href": "pandas.html#operacje-manipulacyjne",
    "title": "5  Pandas",
    "section": "5.6 Operacje manipulacyjne",
    "text": "5.6 Operacje manipulacyjne\nŚciągawka https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf\n\nmerge\n\nhttps://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html\nFunkcja merge służy do łączenia dwóch ramek danych wzdłuż wspólnej kolumny, podobnie jak operacje JOIN w SQL.\nDataFrame.merge(right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None)\nGdzie:\n\nright: ramka danych, którą chcesz dołączyć do oryginalnej ramki danych.\nhow: określa typ łączenia. Dostępne są cztery typy: ‘inner’, ‘outer’, ‘left’ i ‘right’. ‘inner’ to domyślna wartość, która zwraca tylko te wiersze, które mają pasujące klucze w obu ramkach danych.\non: nazwa lub lista nazw, które mają być używane do łączenia. Musi to być nazwa występująca zarówno w oryginalnej, jak i prawej ramce danych.\nleft_on i right_on: nazwy kolumn w lewej i prawej ramce danych, które mają być używane do łączenia. Można to użyć, jeśli nazwy kolumn nie są takie same.\nleft_index i right_index: czy indeksy z lewej i prawej ramki danych mają być używane do łączenia.\nsort: czy wynikowa ramka danych ma być posortowany według łączonych kluczy.\nsuffixes: sufiksy, które mają być dodane do nazw kolumn, które nachodzą na siebie. Domyślnie to (’_x’, ’_y’).\ncopy: czy zawsze kopiować dane, nawet jeśli nie są potrzebne.\nindicator: dodaj kolumnę do wynikowej ramki danych, która pokazuje źródło każdego wiersza.\nvalidate: sprawdź, czy określone zasady łączenia są spełnione.\n\n\nimport pandas as pd\n\ndf1 = pd.DataFrame({\n    'A': ['A0', 'A1', 'A2', 'A3'],\n    'B': ['B0', 'B1', 'B2', 'B3'],\n    'key': ['K0', 'K1', 'K0', 'K1']\n})\n\ndf2 = pd.DataFrame({\n    'C': ['C0', 'C1'],\n    'D': ['D0', 'D1']},\n    index=['K0', 'K1']\n)\n\nprint(df1)\nprint(df2)\nmerged_df = df1.merge(df2, left_on='key', right_index=True)\nprint(merged_df)\n\n    A   B key\n0  A0  B0  K0\n1  A1  B1  K1\n2  A2  B2  K0\n3  A3  B3  K1\n     C   D\nK0  C0  D0\nK1  C1  D1\n    A   B key   C   D\n0  A0  B0  K0  C0  D0\n1  A1  B1  K1  C1  D1\n2  A2  B2  K0  C0  D0\n3  A3  B3  K1  C1  D1\n\n\n\n\nimport pandas as pd\n\ndf1 = pd.DataFrame({\n    'key': ['K0', 'K1', 'K2', 'K3'],\n    'A': ['A0', 'A1', 'A2', 'A3'],\n    'B': ['B0', 'B1', 'B2', 'B3']\n})\n\ndf2 = pd.DataFrame({\n    'key': ['K0', 'K1', 'K4', 'K5'],\n    'C': ['C0', 'C1', 'C2', 'C3'],\n    'D': ['D0', 'D1', 'D2', 'D3']\n})\n\nprint(df1)\n\nprint(df2)\n\ninner_merged_df = df1.merge(df2, how='inner', on='key', suffixes=('_left', '_right'), indicator=True)\nouter_merged_df = df1.merge(df2, how='outer', on='key', suffixes=('_left', '_right'), indicator=True)\nleft_merged_df = df1.merge(df2, how='left', on='key', suffixes=('_left', '_right'), indicator=True)\nright_merged_df = df1.merge(df2, how='right', on='key', suffixes=('_left', '_right'), indicator=True)\n\nprint(\"Inner join\")\nprint(inner_merged_df)\n\nprint(\"Outer join\")\nprint(outer_merged_df)\n\nprint(\"Left join\")\nprint(left_merged_df)\n\nprint(\"Right join\")\nprint(right_merged_df)\n\n  key   A   B\n0  K0  A0  B0\n1  K1  A1  B1\n2  K2  A2  B2\n3  K3  A3  B3\n  key   C   D\n0  K0  C0  D0\n1  K1  C1  D1\n2  K4  C2  D2\n3  K5  C3  D3\nInner join\n  key   A   B   C   D _merge\n0  K0  A0  B0  C0  D0   both\n1  K1  A1  B1  C1  D1   both\nOuter join\n  key    A    B    C    D      _merge\n0  K0   A0   B0   C0   D0        both\n1  K1   A1   B1   C1   D1        both\n2  K2   A2   B2  NaN  NaN   left_only\n3  K3   A3   B3  NaN  NaN   left_only\n4  K4  NaN  NaN   C2   D2  right_only\n5  K5  NaN  NaN   C3   D3  right_only\nLeft join\n  key   A   B    C    D     _merge\n0  K0  A0  B0   C0   D0       both\n1  K1  A1  B1   C1   D1       both\n2  K2  A2  B2  NaN  NaN  left_only\n3  K3  A3  B3  NaN  NaN  left_only\nRight join\n  key    A    B   C   D      _merge\n0  K0   A0   B0  C0  D0        both\n1  K1   A1   B1  C1  D1        both\n2  K4  NaN  NaN  C2  D2  right_only\n3  K5  NaN  NaN  C3  D3  right_only\n\n\n\n\n\n\n\njoin\n\nhttps://pandas.pydata.org/docs/reference/api/pandas.DataFrame.join.html\nMetoda join jest używana do łączenia dwóch ramek danych wzdłuż osi.\nPodstawowe użycie tej metody wygląda następująco:\nDataFrame.join(other, on=None, how='left', lsuffix='', rsuffix='', sort=False)\nGdzie:\n\nother: ramka danych, którą chcesz dołączyć do oryginalnej ramki danych.\non: nazwa lub lista nazw kolumn w oryginalnej ramxce danych, do których chcesz dołączyć.\nhow: określa typ łączenia. Dostępne są cztery typy: ‘inner’, ‘outer’, ‘left’ i ‘right’. ‘left’ to domyślna wartość, która zwraca wszystkie wiersze z oryginalnej ramki danych i pasujące wiersze z drugiej ramki danych. Wartości są uzupełniane wartością NaN, jeśli nie ma dopasowania.\nlsuffix i rsuffix: sufiksy do dodania do kolumn, które się powtarzają. Domyślnie jest to puste.\nsort: czy sortować dane według klucza.\n\n\nimport pandas as pd\n\ndf1 = pd.DataFrame({\n    'A': ['A0', 'A1', 'A2'],\n    'B': ['B0', 'B1', 'B2']},\n    index=['K0', 'K1', 'K2']\n)\n\ndf2 = pd.DataFrame({\n    'C': ['C0', 'C2', 'C3'],\n    'D': ['D0', 'D2', 'D3']},\n    index=['K0', 'K2', 'K3']\n)\n\nprint(df1)\n\nprint(df2)\n\njoined_df = df1.join(df2)\nprint(joined_df)\n\n     A   B\nK0  A0  B0\nK1  A1  B1\nK2  A2  B2\n     C   D\nK0  C0  D0\nK2  C2  D2\nK3  C3  D3\n     A   B    C    D\nK0  A0  B0   C0   D0\nK1  A1  B1  NaN  NaN\nK2  A2  B2   C2   D2\n\n\n\n\nconcat\n\nhttps://pandas.pydata.org/docs/reference/api/pandas.concat.html\nMetoda concat jest używana do łączenia dwóch lub więcej ramek danych wzdłuż określonej osi.\nPodstawowe użycie tej metody wygląda następująco:\npandas.concat(objs, axis=0, join='outer', ignore_index=False, keys=None, levels=None, names=None, verify_integrity=False, sort=False, copy=True)\nGdzie:\n\nobjs: sekwencja ramek danych, które chcesz połączyć.\naxis: oś, wzdłuż której chcesz łączyć ramki danych. Domyślnie to 0 (łączenie wierszy, pionowo), ale można także ustawić na 1 (łączenie kolumn, poziomo).\njoin: określa typ łączenia. Dostępne są dwa typy: ‘outer’ i ‘inner’. ‘outer’ to domyślna wartość, która zwraca wszystkie kolumny z każdej ramki danych. ‘inner’ zwraca tylko te kolumny, które są wspólne dla wszystkich ramek danych.\nignore_index: jeśli ustawione na True, nie używa indeksów z ramek danych do tworzenia indeksu w wynikowej ramce danych. Zamiast tego tworzy nowy indeks od 0 do n-1.\nkeys: wartości do skojarzenia z obiektami.\nlevels: określone indeksy dla nowej ramki danych.\nnames: nazwy dla poziomów indeksów (jeśli są wielopoziomowe).\nverify_integrity: sprawdza, czy nowy, skonkatenowana ramka danych nie ma powtarzających się indeksów.\nsort: czy sortować niekonkatenacyjną oś (np. indeksy, jeśli axis=0), niezależnie od danych.\ncopy: czy zawsze kopiować dane, nawet jeśli nie są potrzebne.\n\n\nimport pandas as pd\n\ndf1 = pd.DataFrame({\n    'A': ['A0', 'A1', 'A2'],\n    'B': ['B0', 'B1', 'B2']\n})\n\ndf2 = pd.DataFrame({\n    'A': ['A3', 'A4', 'A5'],\n    'B': ['B3', 'B4', 'B5']\n})\n\nprint(df1)\n\nprint(df2)\n\nconcatenated_df = pd.concat([df1, df2], ignore_index=True)\nprint(concatenated_df)\n\n    A   B\n0  A0  B0\n1  A1  B1\n2  A2  B2\n    A   B\n0  A3  B3\n1  A4  B4\n2  A5  B5\n    A   B\n0  A0  B0\n1  A1  B1\n2  A2  B2\n3  A3  B3\n4  A4  B4\n5  A5  B5\n\n\n\n\nimport pandas as pd\n\ndf1 = pd.DataFrame({\n    'A': ['A0', 'A1', 'A2'],\n    'B': ['B0', 'B1', 'B2']\n})\n\ndf2 = pd.DataFrame({\n    'C': ['C0', 'C1', 'C2'],\n    'D': ['D0', 'D1', 'D2']\n})\n\nprint(df1)\n\nprint(df2)\n\nconcatenated_df_axis1 = pd.concat([df1, df2], axis=1)\nconcatenated_df_keys = pd.concat([df1, df2], keys=['df1', 'df2'])\n\nprint(concatenated_df_axis1)\nprint(concatenated_df_keys)\n\n    A   B\n0  A0  B0\n1  A1  B1\n2  A2  B2\n    C   D\n0  C0  D0\n1  C1  D1\n2  C2  D2\n    A   B   C   D\n0  A0  B0  C0  D0\n1  A1  B1  C1  D1\n2  A2  B2  C2  D2\n         A    B    C    D\ndf1 0   A0   B0  NaN  NaN\n    1   A1   B1  NaN  NaN\n    2   A2   B2  NaN  NaN\ndf2 0  NaN  NaN   C0   D0\n    1  NaN  NaN   C1   D1\n    2  NaN  NaN   C2   D2\n\n\n\n\n\npivot\n\nhttps://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pivot.html\n\nMetoda pivot jest używana do przekształcenia danych z formatu “długiego” do “szerokiego”.\nPodstawowe użycie tej metody wygląda następująco:\nDataFrame.pivot(index=None, columns=None, values=None)\nGdzie:\n\nindex: nazwa kolumny lub lista nazw kolumn, które mają stać się indeksem w nowej ramce danych.\ncolumns: nazwa kolumny, z której unikalne wartości mają stać się kolumnami w nowej ramce danych.\nvalues: nazwa kolumny lub lista nazw kolumn, które mają stać się wartościami dla nowych kolumn w nowej ramce danych.\n\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'foo': ['one', 'one', 'one', 'two', 'two', 'two'],\n    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n    'baz': [1, 2, 3, 4, 5, 6],\n    'zoo': ['x', 'y', 'z', 'q', 'w', 't'],\n})\n\nprint(df)\n\npivot_df = df.pivot(index='foo', columns='bar', values='baz')\nprint(pivot_df)\n\n   foo bar  baz zoo\n0  one   A    1   x\n1  one   B    2   y\n2  one   C    3   z\n3  two   A    4   q\n4  two   B    5   w\n5  two   C    6   t\nbar  A  B  C\nfoo         \none  1  2  3\ntwo  4  5  6\n\n\n\n\nwide_to_long\n\nhttps://pandas.pydata.org/docs/reference/api/pandas.wide_to_long.html\nMetoda wide_to_long jest używana do przekształcenia danych z szerokiego formatu (gdzie każda kolumna zawiera wiele zmiennych) do długiego formatu (gdzie każda kolumna zawiera jedną zmienną z wieloma pomiarami). Jest to przydatne, gdy mamy dane, które są rozłożone w wielu kolumnach z powtarzającymi się lub sekwencyjnymi nazwami, i chcemy przekształcić te dane w sposób, który ułatwia analizę i wizualizację.\nWyjaśnienie parametrów wide_to_long\n\nstubnames: Lista początkowych części nazw kolumn, które mają zostać przekształcone.\ni: Nazwa kolumny lub lista kolumn, które identyfikują poszczególne wiersze. W naszym przykładzie jest to id, które unikalnie identyfikuje osobę.\nj: Nazwa nowej kolumny, w której będą przechowywane różne poziomy zmiennych (w naszym przypadku rok).\nsep: Opcjonalny separator (domyślnie \"\").\n\n\nimport pandas as pd\n\n# Przykładowe dane\ndata = {\n    'id': ['A', 'B', 'C'],\n    'height_2020': [180, 175, 165],\n    'weight_2020': [70, 76, 65],\n    'height_2021': [181, 176, 166],\n    'weight_2021': [71, 77, 66]\n}\n\ndf = pd.DataFrame(data)\n\n# Przekształcenie do formatu długiego\ndf_long = pd.wide_to_long(df, stubnames=['height', 'weight'], i='id', j='year', sep='_')\ndf_long = df_long.reset_index()\n\nprint(df_long)\n\n  id  year  height  weight\n0  A  2020     180      70\n1  B  2020     175      76\n2  C  2020     165      65\n3  A  2021     181      71\n4  B  2021     176      77\n5  C  2021     166      66\n\n\n\n\nmelt\n\n\nhttps://pandas.pydata.org/docs/reference/api/pandas.DataFrame.melt.html\nFunkcja melt służy do przekształcania danych z formatu szerokiego na długi.\nPodstawowe użycie tej metody wygląda następująco:\npandas.melt(frame, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None)\nGdzie:\n\nframe: ramka danych, którą chcesz przetworzyć.\nid_vars: kolumna(y), które chcesz zachować jako identyfikatory. Te kolumny nie będą zmieniane.\nvalue_vars: kolumna(y), które chcesz przekształcić na pary klucz-wartość. Jeżeli nie jest podane, wszystkie kolumny nie będące id_vars zostaną użyte.\nvar_name: nazwa nowej kolumny, która będzie zawierała nazwy kolumn przekształconych na pary klucz-wartość. Domyślnie to ‘variable’.\nvalue_name: nazwa nowej kolumny, która będzie zawierała wartości kolumn przekształconych na pary klucz-wartość. Domyślnie to ‘value’.\ncol_level: jeżeli kolumny są wielopoziomowe, to jest poziom, który będzie użyty do przekształcania kolumn na pary klucz-wartość.\n\n\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'A': ['foo', 'bar', 'baz'],\n    'B': ['one', 'one', 'two'],\n    'C': [2.0, 1.0, 3.0],\n    'D': [3.0, 2.0, 1.0]\n})\nprint(df)\nmelted_df = df.melt(id_vars=['A', 'B'], value_vars=['C', 'D'], var_name='My_Var', value_name='My_Val')\nprint(melted_df)\n\n     A    B    C    D\n0  foo  one  2.0  3.0\n1  bar  one  1.0  2.0\n2  baz  two  3.0  1.0\n     A    B My_Var  My_Val\n0  foo  one      C     2.0\n1  bar  one      C     1.0\n2  baz  two      C     3.0\n3  foo  one      D     3.0\n4  bar  one      D     2.0\n5  baz  two      D     1.0",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "pandas.html#tidy-data",
    "href": "pandas.html#tidy-data",
    "title": "5  Pandas",
    "section": "5.7 “Tidy data”",
    "text": "5.7 “Tidy data”\n\n\n\nImię\nWiek\nWzrost\nKolor oczu\n\n\n\n\nAdam\n26\n167\nBrązowe\n\n\nSylwia\n34\n164\nPiwne\n\n\nTomasz\n42\n183\nNiebieskie\n\n\n\n\njedna obserwacja (jednostka statystyczna) = jeden wiersz w tabeli/macierzy/ramce danych\nwartosci danej cechy znajduja sie w kolumnach\njeden typ/rodzaj obserwacji w jednej tabeli/macierzy/ramce danych",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "pandas.html#obsługa-brakujących-danych",
    "href": "pandas.html#obsługa-brakujących-danych",
    "title": "5  Pandas",
    "section": "5.8 Obsługa brakujących danych",
    "text": "5.8 Obsługa brakujących danych\n\nimport numpy as np\nimport pandas as pd\n\nstring_data = pd.Series(['aardvark', 'artichoke', np.nan, 'avocado'])\nprint(string_data)\nprint(string_data.isnull())\nprint(string_data.dropna())\n\n0     aardvark\n1    artichoke\n2          NaN\n3      avocado\ndtype: object\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n0     aardvark\n1    artichoke\n3      avocado\ndtype: object\n\n\n\n\nfrom numpy import nan as NA\nimport pandas as pd\n\ndata = pd.DataFrame([[1., 6.5, 3.], [1., NA, NA], \n                     [NA, NA, NA], [NA, 6.5, 3.]])\ncleaned = data.dropna()\nprint(cleaned)\nprint(data.dropna(how='all'))\ndata[4] = NA\nprint(data.dropna(how='all', axis=1))\nprint(data)\nprint(data.fillna(0))\nprint(data.fillna({1: 0.5, 2: 0}))\n\n     0    1    2\n0  1.0  6.5  3.0\n     0    1    2\n0  1.0  6.5  3.0\n1  1.0  NaN  NaN\n3  NaN  6.5  3.0\n     0    1    2\n0  1.0  6.5  3.0\n1  1.0  NaN  NaN\n2  NaN  NaN  NaN\n3  NaN  6.5  3.0\n     0    1    2   4\n0  1.0  6.5  3.0 NaN\n1  1.0  NaN  NaN NaN\n2  NaN  NaN  NaN NaN\n3  NaN  6.5  3.0 NaN\n     0    1    2    4\n0  1.0  6.5  3.0  0.0\n1  1.0  0.0  0.0  0.0\n2  0.0  0.0  0.0  0.0\n3  0.0  6.5  3.0  0.0\n     0    1    2   4\n0  1.0  6.5  3.0 NaN\n1  1.0  0.5  0.0 NaN\n2  NaN  0.5  0.0 NaN\n3  NaN  6.5  3.0 NaN",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "pandas.html#usuwanie-duplikatów",
    "href": "pandas.html#usuwanie-duplikatów",
    "title": "5  Pandas",
    "section": "5.9 Usuwanie duplikatów",
    "text": "5.9 Usuwanie duplikatów\n\nimport pandas as pd\n\ndata = pd.DataFrame({'k1': ['one', 'two'] * 3 + ['two'],\n                     'k2': [1, 1, 2, 3, 3, 4, 4]})\nprint(data)\nprint(data.duplicated())\nprint(data.drop_duplicates())\n\n    k1  k2\n0  one   1\n1  two   1\n2  one   2\n3  two   3\n4  one   3\n5  two   4\n6  two   4\n0    False\n1    False\n2    False\n3    False\n4    False\n5    False\n6     True\ndtype: bool\n    k1  k2\n0  one   1\n1  two   1\n2  one   2\n3  two   3\n4  one   3\n5  two   4",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "pandas.html#zastępowanie-wartościami",
    "href": "pandas.html#zastępowanie-wartościami",
    "title": "5  Pandas",
    "section": "5.10 Zastępowanie wartościami",
    "text": "5.10 Zastępowanie wartościami\n\nimport pandas as pd\nimport numpy as np\n\ndata = pd.Series([1., -999., 2., -999., -1000., 3.])\nprint(data)\nprint(data.replace(-999, np.nan))\nprint(data.replace([-999, -1000], np.nan))\nprint(data.replace([-999, -1000], [np.nan, 0]))\nprint(data.replace({-999: np.nan, -1000: 0}))\n\n0       1.0\n1    -999.0\n2       2.0\n3    -999.0\n4   -1000.0\n5       3.0\ndtype: float64\n0       1.0\n1       NaN\n2       2.0\n3       NaN\n4   -1000.0\n5       3.0\ndtype: float64\n0    1.0\n1    NaN\n2    2.0\n3    NaN\n4    NaN\n5    3.0\ndtype: float64\n0    1.0\n1    NaN\n2    2.0\n3    NaN\n4    0.0\n5    3.0\ndtype: float64\n0    1.0\n1    NaN\n2    2.0\n3    NaN\n4    0.0\n5    3.0\ndtype: float64",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "pandas.html#dyskretyzacja-i-podział-na-koszyki",
    "href": "pandas.html#dyskretyzacja-i-podział-na-koszyki",
    "title": "5  Pandas",
    "section": "5.11 Dyskretyzacja i podział na koszyki",
    "text": "5.11 Dyskretyzacja i podział na koszyki\n\nimport pandas as pd\n\nages = [20, 22, 25, 27, 21, 23, 37, 31, 61, 45, 41, 32]\nbins = [18, 25, 35, 60, 100]\ncats = pd.cut(ages, bins)\nprint(cats)\nprint(cats.codes)\nprint(cats.categories)\nprint(pd.Series(cats).value_counts())\n\n[(18, 25], (18, 25], (18, 25], (25, 35], (18, 25], ..., (25, 35], (60, 100], (35, 60], (35, 60], (25, 35]]\nLength: 12\nCategories (4, interval[int64, right]): [(18, 25] &lt; (25, 35] &lt; (35, 60] &lt; (60, 100]]\n[0 0 0 1 0 0 2 1 3 2 2 1]\nIntervalIndex([(18, 25], (25, 35], (35, 60], (60, 100]], dtype='interval[int64, right]')\n(18, 25]     5\n(25, 35]     3\n(35, 60]     3\n(60, 100]    1\nName: count, dtype: int64\n\n\n\n\nimport pandas as pd\n\nages = [20, 22, 25, 27, 21, 23, 37, 31, 61, 45, 41, 32]\nbins = [18, 25, 35, 60, 100]\ncats2 = pd.cut(ages, [18, 26, 36, 61, 100], right=False)\nprint(cats2)\ngroup_names = ['Youth', 'YoungAdult',\n               'MiddleAged', 'Senior']\nprint(pd.cut(ages, bins, labels=group_names))\n\n[[18, 26), [18, 26), [18, 26), [26, 36), [18, 26), ..., [26, 36), [61, 100), [36, 61), [36, 61), [26, 36)]\nLength: 12\nCategories (4, interval[int64, left]): [[18, 26) &lt; [26, 36) &lt; [36, 61) &lt; [61, 100)]\n['Youth', 'Youth', 'Youth', 'YoungAdult', 'Youth', ..., 'YoungAdult', 'Senior', 'MiddleAged', 'MiddleAged', 'YoungAdult']\nLength: 12\nCategories (4, object): ['Youth' &lt; 'YoungAdult' &lt; 'MiddleAged' &lt; 'Senior']\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\ndata = np.random.rand(20)\nprint(pd.cut(data, 4, precision=2))\n\n[(0.5, 0.72], (0.72, 0.93], (0.29, 0.5], (0.29, 0.5], (0.72, 0.93], ..., (0.5, 0.72], (0.29, 0.5], (0.72, 0.93], (0.72, 0.93], (0.72, 0.93]]\nLength: 20\nCategories (4, interval[float64, right]): [(0.074, 0.29] &lt; (0.29, 0.5] &lt; (0.5, 0.72] &lt; (0.72, 0.93]]\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\ndata = np.random.randn(1000)\ncats = pd.qcut(data, 4)\nprint(cats)\nprint(pd.Series(cats).value_counts())\n\n[(-3.4779999999999998, -0.66], (-3.4779999999999998, -0.66], (-3.4779999999999998, -0.66], (0.683, 3.706], (0.683, 3.706], ..., (0.683, 3.706], (-0.66, 0.0289], (-3.4779999999999998, -0.66], (0.0289, 0.683], (0.0289, 0.683]]\nLength: 1000\nCategories (4, interval[float64, right]): [(-3.4779999999999998, -0.66] &lt; (-0.66, 0.0289] &lt; (0.0289, 0.683] &lt; (0.683, 3.706]]\n(-3.4779999999999998, -0.66]    250\n(-0.66, 0.0289]                 250\n(0.0289, 0.683]                 250\n(0.683, 3.706]                  250\nName: count, dtype: int64",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "pandas.html#wykrywanie-i-filtrowanie-elementów-odstających",
    "href": "pandas.html#wykrywanie-i-filtrowanie-elementów-odstających",
    "title": "5  Pandas",
    "section": "5.12 Wykrywanie i filtrowanie elementów odstających",
    "text": "5.12 Wykrywanie i filtrowanie elementów odstających\n\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame(np.random.randn(1000, 4))\nprint(data.describe())\nprint(\"---\")\ncol = data[2]\nprint(col[np.abs(col) &gt; 3])\nprint(\"---\")\nprint(data[(np.abs(data) &gt; 3).any(axis=1)])\n\n                 0            1            2            3\ncount  1000.000000  1000.000000  1000.000000  1000.000000\nmean      0.007699    -0.041889     0.014359     0.027199\nstd       1.018269     0.989527     1.012964     0.968989\nmin      -3.145478    -3.727267    -3.435129    -2.872924\n25%      -0.690380    -0.736637    -0.677776    -0.654963\n50%      -0.006236    -0.090093    -0.007900     0.054187\n75%       0.701992     0.614812     0.736354     0.654573\nmax       3.038335     4.058471     3.228963     3.226998\n---\n172   -3.435129\n201   -3.096369\n291    3.228963\n599   -3.091643\n885    3.109503\n974    3.074592\nName: 2, dtype: float64\n---\n            0         1         2         3\n172 -2.277164 -1.484338 -3.435129 -0.657581\n196 -1.326941 -3.727267  1.177944 -0.286001\n201 -0.371386 -2.675881 -3.096369 -0.638088\n291 -1.659662 -0.087951  3.228963 -0.455845\n337 -3.145478 -0.754988  0.124800  0.654533\n348  1.173855  1.080837  0.004797  3.226998\n439 -0.178917  3.186270  0.924743  0.179658\n599 -0.146922 -1.201791 -3.091643 -0.007250\n759  0.444746  4.058471  1.119019  0.671101\n771 -0.181245  3.161316 -2.242306  1.511918\n853  1.386330  1.247109 -0.754404  3.006794\n885  1.997737  0.966561  3.109503  0.041161\n897  3.038335 -0.195239  0.860905 -0.304476\n974 -0.075740  1.458388  3.074592 -1.072510",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "pandas.html#zmiana-typu-w-kolumnie",
    "href": "pandas.html#zmiana-typu-w-kolumnie",
    "title": "5  Pandas",
    "section": "5.13 Zmiana typu w kolumnie",
    "text": "5.13 Zmiana typu w kolumnie\n\nimport pandas as pd\n\n\ndata = {\n    'A': ['1', '2', '3', '4', '5', '6'],\n    'B': ['7.5', '8.5', '9.5', '10.5', '11.5', '12.5'],\n    'C': ['x', 'y', 'z', 'x', 'y', 'z']\n}\ndf = pd.DataFrame(data)\n\n# Wyświetlenie oryginalnej ramki danych\nprint(\"Oryginalna ramka danych:\")\nprint(df)\n\n# Zmiana typu danych kolumny 'A' na int\ndf['A'] = pd.Series(df['A'], dtype=int)\n\n# Zmiana typu danych kolumny 'B' na float\ndf['B'] = pd.Series(df['A'], dtype=float)\n\n# Wyświetlenie ramki danych po zmianie typów\nprint(\"\\nRamka danych po zmianie typów:\")\nprint(df)\n\nOryginalna ramka danych:\n   A     B  C\n0  1   7.5  x\n1  2   8.5  y\n2  3   9.5  z\n3  4  10.5  x\n4  5  11.5  y\n5  6  12.5  z\n\nRamka danych po zmianie typów:\n   A    B  C\n0  1  1.0  x\n1  2  2.0  y\n2  3  3.0  z\n3  4  4.0  x\n4  5  5.0  y\n5  6  6.0  z\n\n\n\nimport pandas as pd\n\n\ndata = {\n    'A': ['1', '2', '3', '4', '5', '6'],\n    'B': ['7.5', '8.5', '9.5', '10.5', '11.5', '12.5'],\n    'C': ['x', 'y', 'z', 'x', 'y', 'z']\n}\ndf = pd.DataFrame(data)\n\n# Wyświetlenie oryginalnej ramki danych\nprint(\"Oryginalna ramka danych:\")\nprint(df)\n\n# Zmiana typu danych kolumny 'A' na int\ndf['A'] = df['A'].astype(int)\n\n# Zmiana typu danych kolumny 'B' na float\ndf['B'] = df['B'].astype(float)\n\n# Wyświetlenie ramki danych po zmianie typów\nprint(\"\\nRamka danych po zmianie typów:\")\nprint(df)\n\nOryginalna ramka danych:\n   A     B  C\n0  1   7.5  x\n1  2   8.5  y\n2  3   9.5  z\n3  4  10.5  x\n4  5  11.5  y\n5  6  12.5  z\n\nRamka danych po zmianie typów:\n   A     B  C\n0  1   7.5  x\n1  2   8.5  y\n2  3   9.5  z\n3  4  10.5  x\n4  5  11.5  y\n5  6  12.5  z",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "pandas.html#zmiana-znaku-kategoriach",
    "href": "pandas.html#zmiana-znaku-kategoriach",
    "title": "5  Pandas",
    "section": "5.14 Zmiana znaku kategoriach",
    "text": "5.14 Zmiana znaku kategoriach\n\nimport pandas as pd\n\n# Tworzenie ramki danych\ndata = {\n    'A': ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr'],\n    'B': ['1.23', '4.56', '7.89', '0.12', '3.45', '6.78'],\n    'C': ['xyz', 'uvw', 'rst', 'opq', 'lmn', 'ijk']\n}\ndf = pd.DataFrame(data)\n\n# Wyświetlenie oryginalnej ramki danych\nprint(\"Oryginalna ramka danych:\")\nprint(df)\n\n# Zmiana małych liter na duże w kolumnie 'A'\ndf['A'] = df['A'].str.upper()\n\n# Zastąpienie kropki przecinkiem w kolumnie 'B'\ndf['B'] = df['B'].str.replace('.', ',')\n\n# Wyświetlenie ramki danych po modyfikacji\nprint(\"\\nRamka danych po modyfikacji:\")\nprint(df)\n\nOryginalna ramka danych:\n     A     B    C\n0  abc  1.23  xyz\n1  def  4.56  uvw\n2  ghi  7.89  rst\n3  jkl  0.12  opq\n4  mno  3.45  lmn\n5  pqr  6.78  ijk\n\nRamka danych po modyfikacji:\n     A     B    C\n0  ABC  1,23  xyz\n1  DEF  4,56  uvw\n2  GHI  7,89  rst\n3  JKL  0,12  opq\n4  MNO  3,45  lmn\n5  PQR  6,78  ijk\n\n\nBibliografia:\n\nDokumentacja biblioteki, https://pandas.pydata.org/, dostęp online 5.03.2021.\nHannah Stepanek, Thinking in Pandas, How to Use the Python Data Analysis Library the Right Way, Apress, 2020.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pandas</span>"
    ]
  },
  {
    "objectID": "matplotlib.html",
    "href": "matplotlib.html",
    "title": "6  Matplotlib",
    "section": "",
    "text": "6.1 Galerie wykresów\nhttps://matplotlib.org/gallery/index.html\nhttps://python-graph-gallery.com/\nhttps://github.com/rasbt/matplotlib-gallery\nhttps://seaborn.pydata.org/examples/index.html",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#wykres-liniowy",
    "href": "matplotlib.html#wykres-liniowy",
    "title": "6  Matplotlib",
    "section": "6.2 Wykres liniowy",
    "text": "6.2 Wykres liniowy\nWykres liniowy jest stosowany, gdy chcemy przedstawić zmiany wartości w czasie lub w funkcji innej zmiennej. Wykres liniowy jest odpowiedni dla danych ciągłych, gdzie istnieje związek między punktami danych. Służy do ilustrowania trendów, wzorców i porównywania między różnymi zestawami danych.\nOto niektóre sytuacje, w których wykresy liniowe są stosowane:\n\nPrezentowanie zmian wartości w czasie, na przykład wzrostu gospodarczego, ceny akcji, zmiany temperatury itp.\nUkazywanie związku między dwiema zmiennymi, np. związek między poziomem edukacji a zarobkami.\nPorównywanie trendów dla różnych grup lub kategorii, na przykład analiza sprzedaży różnych produktów w czasie.\nAnaliza korelacji między zmiennymi, na przykład związek między rosnącymi cenami paliwa a spadkiem sprzedaży samochodów.\nEksploracja danych, aby zrozumieć strukturę danych i znaleźć wzorce lub anomalie.\n\nWykresy liniowe są szczególnie przydatne, gdy mamy do czynienia z danymi ciągłymi, a relacje między punktami danych są istotne. Jednak mogą być również używane do prezentowania danych dyskretnych, o ile istnieje zrozumiały związek między punktami danych.\n\nimport matplotlib.pyplot as plt\n\nx = [0, 7, 4, 5, 8, -9]\nplt.plot(x)\nplt.show()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n1x = np.linspace(0, 2, 100)\n2plt.plot(x, x, label='linear')\n3plt.plot(x, x ** 2, label='quadratic')\n4plt.plot(x, x ** 3, label='cubic')\n5plt.xlabel('x label')\n6plt.ylabel('y label')\n7plt.title(\"Simple Plot\")\n8plt.legend()\n9plt.show()\n\n\n1\n\nx = np.linspace(0, 2, 100): tworzy tablicę x z 100 równomiernie rozłożonymi wartościami od 0 do 2 (włącznie), korzystając z funkcji linspace z biblioteki numpy.\n\n2\n\nplt.plot(x, x, label='linear'): rysuje liniowy wykres (y = x) z wartościami z tablicy x.\n\n3\n\nplt.plot(x, x**2, label='quadratic'): rysuje wykres kwadratowy (y = x^2) z wartościami z tablicy x.\n\n4\n\nplt.plot(x, x**3, label='cubic'): rysuje wykres sześcienny (y = x^3) z wartościami z tablicy x.\n\n5\n\nplt.xlabel('x label'): dodaje etykietę osi X.\n\n6\n\nplt.ylabel('y label'): dodaje etykietę osi Y.\n\n7\n\nplt.title(\"Simple Plot\"): nadaje tytuł wykresu “Simple Plot”.\n\n8\n\nplt.legend(): dodaje legendę do wykresu, która pokazuje etykiety (label) dla poszczególnych linii.\n\n9\n\nplt.show(): wyświetla wykres.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#parametry-legendy",
    "href": "matplotlib.html#parametry-legendy",
    "title": "6  Matplotlib",
    "section": "6.3 Parametry legendy",
    "text": "6.3 Parametry legendy",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#style-kolory-linii",
    "href": "matplotlib.html#style-kolory-linii",
    "title": "6  Matplotlib",
    "section": "6.4 Style, kolory linii",
    "text": "6.4 Style, kolory linii\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n1x = np.arange(14)\n2y = np.cos(5 * x)\n3plt.plot(x, y + 2, 'blue', linestyle=\"-\", label=\"niebieski\")\n4plt.plot(x, y + 1, 'red', linestyle=\":\", label=\"czerwony\")\n5plt.plot(x, y, 'green', linestyle=\"--\", label=\"zielony\")\nplt.legend(title='Legenda:')\nplt.show()\n\n\n1\n\nx = np.arange(14): tworzy tablicę x z wartościami od 0 do 13 (łącznie z 13), korzystając z funkcji arange z biblioteki numpy.\n\n2\n\ny = np.cos(5 * x): oblicza wartości funkcji cosinus dla każdej wartości x, przemnożonej przez 5. Wynikowe wartości są zapisane w tablicy y.\n\n3\n\nplt.plot(x, y + 2, 'blue', linestyle=\"-\", label=\"niebieski\"): rysuje niebieski wykres z wartościami z tablicy x, a wartości y przesunięte o 2 w górę. Linia jest ciągła (linestyle=\"-\").\n\n4\n\nplt.plot(x, y + 1, 'red', linestyle=\":\", label=\"czerwony\"): rysuje czerwony wykres z wartościami z tablicy x, a wartości y przesunięte o 1 w górę. Linia jest punktowana (linestyle=\":\").\n\n5\n\nplt.plot(x, y, 'green', linestyle=\"--\", label=\"zielony\"): rysuje zielony wykres z wartościami z tablicy x i wartościami y. Linia jest przerywana (linestyle=\"--\").",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#wykresy-jako-obiekty",
    "href": "matplotlib.html#wykresy-jako-obiekty",
    "title": "6  Matplotlib",
    "section": "6.5 Wykresy jako obiekty",
    "text": "6.5 Wykresy jako obiekty\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n1x = np.arange(0, 10, 0.2)\n2y = np.sin(x)\n3fig, ax = plt.subplots()\n4ax.plot(x, y)\n5plt.show()\n\n\n1\n\nx = np.arange(0, 10, 0.2): tworzy tablicę x z wartościami od 0 do 10 (bez 10) z krokiem 0.2, korzystając z funkcji arange z biblioteki numpy.\n\n2\n\ny = np.sin(x): oblicza wartości funkcji sinus dla każdej wartości x. Wynikowe wartości są zapisane w tablicy y.\n\n3\n\nfig, ax = plt.subplots(): tworzy nową figurę (fig) i osie (ax) za pomocą funkcji subplots z biblioteki matplotlib.pyplot. Figura to obiekt zawierający wszystkie elementy wykresu, takie jak osie, linie wykresu, tekst itp. Osie to obiekt, który definiuje układ współrzędnych, na którym rysowany jest wykres.\n\n4\n\nax.plot(x, y): rysuje wykres wartości y w funkcji x na osiach ax utworzonych wcześniej.\n\n5\n\nplt.show(): wyświetla wykres.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#wykres-liniowy-i-punktowy",
    "href": "matplotlib.html#wykres-liniowy-i-punktowy",
    "title": "6  Matplotlib",
    "section": "6.6 Wykres liniowy i punktowy",
    "text": "6.6 Wykres liniowy i punktowy\nWykres punktowy (scatter plot) jest stosowany, gdy chcemy przedstawić związek między dwiema zmiennymi lub rozkład punktów danych w przestrzeni dwuwymiarowej. Wykres punktowy jest odpowiedni dla danych zarówno ciągłych, jak i dyskretnych, gdy chcemy zobrazować wzory, korelację lub związki między zmiennymi.\nOto niektóre sytuacje, w których wykresy punktowe są stosowane:\n\nAnaliza korelacji między dwiema zmiennymi, na przykład związek między wiekiem a dochodem.\nPrezentowanie rozkładu punktów danych, na przykład wykazanie geograficznego rozmieszczenia sklepów w mieście.\nEksploracja danych, aby zrozumieć strukturę danych i znaleźć wzorce, grupy lub anomalie, na przykład w celu identyfikacji skupisk danych w analizie skupień (clustering).\nWykrywanie wartości odstających (outliers) w danych, na przykład dla wykrywania nietypowych obserwacji w zbiorze danych.\nPorównywanie różnych grup lub kategorii danych, na przykład porównanie wzrostu gospodarczego różnych krajów względem ich długu publicznego.\n\nWykresy punktowe są szczególnie przydatne, gdy mamy do czynienia z danymi o różnym charakterze (ciągłe lub dyskretne) oraz gdy chcemy zbadać korelację, grupy, wzorce lub wartości odstające.\n\nimport matplotlib.pyplot as plt\n\n1fig = plt.figure()\n2ax = fig.add_subplot(111)\n3ax.plot([1, 2, 3, 4], [10, 20, 25, 30], color='lightblue', linewidth=3)\n4ax.scatter([0.3, 3.8, 1.2, 2.5], [11, 25, 9, 26], color='darkgreen', marker='^')\n5ax.set_xlim(0.5, 4.5)\nplt.show()\n\n\n1\n\nfig = plt.figure(): tworzy nową figurę (fig). Figura to obiekt zawierający wszystkie elementy wykresu, takie jak osie, linie wykresu, tekst itp.\n\n2\n\nax = fig.add_subplot(111): dodaje nowy zestaw osi (ax) do figury fig za pomocą metody add_subplot. Argument 111 oznacza, że chcemy stworzyć siatkę 1x1 i umieścić nasz wykres na pierwszym (i jedynym) polu tej siatki.\n\n3\n\nax.plot([1, 2, 3, 4], [10, 20, 25, 30], color='lightblue', linewidth=3): rysuje niebieski wykres liniowy o szerokości linii równej 3 na osiach ax, używając listy wartości [1, 2, 3, 4] dla osi X i [10, 20, 25, 30] dla osi Y.\n\n4\n\nax.scatter([0.3, 3.8, 1.2, 2.5], [11, 25, 9, 26], color='darkgreen', marker='^'): dodaje punkty w kształcie trójkątów (‘^’) na osiach ax w miejscach określonych przez listy wartości [0.3, 3.8, 1.2, 2.5] dla osi X i [11, 25, 9, 26] dla osi Y. Punkty są w kolorze ciemnozielonym.\n\n5\n\nax.set_xlim(0.5, 4.5): ustawia zakres wartości osi X na osiach ax od 0.5 do 4.5.\n\n\n\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n\nhouse_prices = [230000, 350000, 480000, 280000, 420000, 610000, 390000, 580000]\nsquare_meters = [90, 140, 210, 100, 170, 260, 150, 240]\n1plt.scatter(square_meters, house_prices, color='blue', marker='o')\nplt.xlabel('Metraż [m2]')\nplt.ylabel('Cena domu [PLN]')\nplt.title('Związek między metrażem a ceną domu')\nplt.show()\n\n\n1\n\nplt.scatter(square_meters, house_prices, color='blue', marker='o'): tworzy wykres punktowy (scatter plot) z metrażem domów na osi X (square_meters) i cenami domów na osi Y (house_prices). Punkty są koloru niebieskiego (color='blue') i mają kształt kółka (marker='o').\n\n\n\n\n\n\n\n\n\n\n\n\nfrom matplotlib import pyplot as plt\n\nx = [1, -3, 4, 5, 6]\ny = [2, 6, -4, 1, 2]\narea = [70, 60, 1, 50, 2]\n1plt.scatter(x, y, marker=\"&gt;\", color=\"brown\", alpha=0.5, s=area)\nplt.show()\n\n\n1\n\nKod plt.scatter(x, y, marker=\"&gt;\", color=\"brown\", alpha=0.5, s=area) tworzy wykres punktowy (scatter plot) x: lista lub tablica współrzędnych x punktów na wykresie. y: lista lub tablica współrzędnych y punktów na wykresie. Wartości x i y muszą mieć tę samą długość, aby przedstawić każdy punkt na wykresie. marker: symbol reprezentujący kształt punktów na wykresie. W tym przypadku, używamy \"&gt;\" co oznacza strzałkę skierowaną w prawo. color: kolor punktów na wykresie. W tym przypadku, używamy koloru “brown” (brązowy). alpha: przezroczystość punktów na wykresie, gdzie wartość 1 oznacza całkowitą nieprzezroczystość, a 0 całkowitą przezroczystość. W tym przypadku, używamy wartości 0.5 co oznacza półprzezroczystość punktów. s: rozmiar punktów na wykresie, który może być pojedynczą wartością lub listą/tablicą wartości o długości takiej samej jak współrzędne x i y.\n\n\n\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nN = 50\nx = np.random.rand(N)\ny = np.random.rand(N)\ncolors = np.random.rand(N)\narea = (30 * np.random.rand(N)) ** 2  # 0 to 15 point radii\n\nplt.scatter(x, y, s=area, c=colors, alpha=0.5)\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#kolory",
    "href": "matplotlib.html#kolory",
    "title": "6  Matplotlib",
    "section": "6.7 Kolory",
    "text": "6.7 Kolory\n\nhttps://matplotlib.org/stable/gallery/color/named_colors.html\nhttps://pl.wikipedia.org/wiki/Lista_kolor%C3%B3w\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.random.rand(50)\ny = np.random.rand(50)\nz = np.random.rand(50)\n1plt.scatter(x, y, c=z, cmap='viridis')\n2plt.colorbar()\nplt.xlabel('Oś X')\nplt.ylabel('Oś Y')\nplt.title('Mapa kolorów dla wykresu punktowego')\nplt.show()\n\n\n1\n\nplt.scatter(x, y, c=z, cmap='viridis'): ta linia tworzy wykres punktowy (scatter plot) z danymi x, y i z. x i y to dane, które będą wyświetlane na osi X i Y, a z to dane, które będą używane do stworzenia mapy kolorów. Argument cmap='viridis' określa mapę kolorów, która będzie użyta do przypisania kolorów do wartości numerycznych.\n\n2\n\nplt.colorbar(): ta linia dodaje pasek kolorów do wykresu punktowego. Pasek kolorów wskazuje, które kolory odpowiadają wartościom numerycznym na mapie kolorów.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#mapy-kolorów",
    "href": "matplotlib.html#mapy-kolorów",
    "title": "6  Matplotlib",
    "section": "6.8 Mapy kolorów",
    "text": "6.8 Mapy kolorów\nLista wbudowanych map kolorów: https://matplotlib.org/stable/tutorials/colors/colormaps.html\n\n\n\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\n\n# Przykładowe dane\nx = np.random.rand(50)\ny = np.random.rand(50)\nz = np.random.rand(50) * 100\n\n# Utworzenie mapy kolorów\nnorm = Normalize(vmin=0, vmax=100)\ncmap = plt.cm.viridis\n\n# Tworzenie wykresu punktowego z mapą kolorów\nplt.scatter(x, y, c=z, cmap=cmap, norm=norm)\nplt.colorbar()\n\n# Dodanie etykiet osi\nplt.xlabel('Oś X')\nplt.ylabel('Oś Y')\nplt.title('Mapa kolorów dla wykresu punktowego')\n\n# Wyświetlenie wykresu\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#markery",
    "href": "matplotlib.html#markery",
    "title": "6  Matplotlib",
    "section": "6.9 Markery",
    "text": "6.9 Markery\nhttps://matplotlib.org/stable/api/markers_api.html\n\nimport matplotlib.pyplot as plt\n\n1plt.plot([1, 2, 3, 4], [10, 20, 25, 30], color='lightblue', linewidth=3)\n2plt.scatter([0.3, 3.8, 1.2, 2.5], [11, 25, 9, 26], color='darkgreen', marker='^')\n3plt.xlim(0.5, 4.5)\nplt.show()\n\n\n1\n\nplt.plot([1, 2, 3, 4], [10, 20, 25, 30], color='lightblue', linewidth=3) - Tworzy wykres liniowy z podanymi współrzędnymi punktów (1, 10), (2, 20), (3, 25) i (4, 30). Kolor linii to jasnoniebieski (lightblue), a jej grubość wynosi 3.\n\n2\n\nplt.scatter([0.3, 3.8, 1.2, 2.5], [11, 25, 9, 26], color='darkgreen', marker='^') - Tworzy wykres punktowy z podanymi współrzędnymi punktów (0.3, 11), (3.8, 25), (1.2, 9) i (2.5, 26). - Kolor punktów to ciemnozielony (darkgreen), a ich kształt to trójkąty wypełnione w górę (^).\n\n3\n\nplt.xlim(0.5, 4.5) - Ustala zakres wartości na osi X, zaczynając od 0.5 do 4.5.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#zapis-do-pliku",
    "href": "matplotlib.html#zapis-do-pliku",
    "title": "6  Matplotlib",
    "section": "6.10 Zapis do pliku",
    "text": "6.10 Zapis do pliku\n\nPNG (Portable Network Graphics) - plik rasterowy, popularny format do zapisywania obrazów w Internecie.\nJPEG (Joint Photographic Experts Group) - plik rasterowy, popularny format do zapisywania obrazów fotograficznych.\nSVG (Scalable Vector Graphics) - plik wektorowy, dobrze skalujący się i zachowujący jakość na różnych rozdzielczościach.\nPDF (Portable Document Format) - format dokumentów wektorowych, popularny w druku i przeglądaniu dokumentów.\nEPS (Encapsulated PostScript) - plik wektorowy, często używany w publikacjach naukowych i materiałach drukowanych.\nTIFF (Tagged Image File Format) - plik rasterowy, popularny w profesjonalnym druku i grafice.\nWebP to nowoczesny format obrazów opracowany przez Google, który oferuje lepszą kompresję oraz niższe straty jakości w porównaniu do popularnych formatów JPEG i PNG, co przyczynia się do szybszego ładowania stron internetowych i oszczędności transferu danych.\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.arange(0, 10)\ny = x ^ 2\n# Labeling the Axes and Title\nplt.title(\"Graph Drawing\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Distance\")\n\n# Formatting the line colors\nplt.plot(x, y, 'r')\n\n# Formatting the line type\nplt.plot(x, y, '&gt;')\n\n# save in pdf formats\nplt.savefig('timevsdist.pdf', format='pdf')",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#linie-poziome-i-pionowe",
    "href": "matplotlib.html#linie-poziome-i-pionowe",
    "title": "6  Matplotlib",
    "section": "6.11 Linie poziome i pionowe",
    "text": "6.11 Linie poziome i pionowe\nFunkcje axhline i axvline służą do dodawania poziomych (horyzontalnych) i pionowych (wertykalnych) linii do wykresu, odpowiednio.\naxhline rysuje horyzontalną linię przechodzącą przez określoną wartość na osi Y, niezależnie od wartości na osi X. Składnia funkcji to axhline(y, xmin, xmax, **kwargs), gdzie:\n\ny - wartość na osi Y, przez którą przechodzi linia (domyślnie 0)\nxmin, xmax - wartości z zakresu 0-1 określające początek i koniec linii na osi X (domyślnie 0 i 1)\n**kwargs - dodatkowe argumenty, takie jak color, linewidth czy linestyle, służące do kontrolowania wyglądu linii\n\naxvline rysuje pionową linię przechodzącą przez określoną wartość na osi X, niezależnie od wartości na osi Y. Składnia funkcji to axvline(x, ymin, ymax, **kwargs), gdzie:\n\nx - wartość na osi X, przez którą przechodzi linia (domyślnie 0)\nymin, ymax - wartości z zakresu 0-1 określające początek i koniec linii na osi Y (domyślnie 0 i 1)\n**kwargs - dodatkowe argumenty, takie jak color, linewidth czy linestyle, służące do kontrolowania wyglądu linii\n\n\nimport matplotlib.pyplot as plt\n\nplt.plot([0, 5], [0, 5], color='blue')\nplt.axhline(2, color='red', linewidth=2)  # Horyzontalna linia przechodząca przez Y=2\nplt.axvline(3, color='green', linestyle='--')  # Pionowa linia przechodząca przez X=3, styl linii przerywany\nplt.show()\n\n\n\n\n\n\n\n\nW powyższym przykładzie, axhline rysuje czerwoną linię horyzontalną przechodzącą przez wartość 2 na osi Y, natomiast axvline rysuje zieloną przerywaną linię pionową przechodzącą przez wartość 3 na osi X.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.arange(-5, 5, 0.1)\nx1 = x[x &lt; 0]\ny1 = 1 / x1\nplt.plot(x1, y1)\nx2 = x[x &gt; 0]\ny2 = 1 / x2\nplt.plot(x2, y2)\nplt.ylim(-10, 10)\nplt.axhline(y=0, linestyle=\"--\")\nplt.axvline(x=0, linestyle=\":\")\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#adnotacje-tekst-na-wykresie",
    "href": "matplotlib.html#adnotacje-tekst-na-wykresie",
    "title": "6  Matplotlib",
    "section": "6.12 Adnotacje (tekst) na wykresie",
    "text": "6.12 Adnotacje (tekst) na wykresie\nFunkcja annotate służy do dodawania adnotacji (tekstu i strzałek) na wykresie w celu wyróżnienia lub zaznaczenia określonych punktów czy obszarów.\nSkładnia funkcji to annotate(text, xy, xytext, arrowprops, **kwargs), gdzie:\n\ntext - ciąg znaków reprezentujący tekst adnotacji.\nxy - krotka (x, y) określająca współrzędne punktu, do którego odnosimy się w adnotacji.\nxytext - krotka (x, y) określająca współrzędne, w których tekst adnotacji powinien się zacząć. Jeśli nie podano, tekst zostanie wyświetlony bezpośrednio przy współrzędnych xy.\narrowprops - słownik zawierający opcje rysowania strzałki, takie jak arrowstyle, color czy linewidth. Jeśli nie podano, strzałka nie zostanie narysowana.\n**kwargs - dodatkowe argumenty dotyczące formatowania tekstu, takie jak fontsize, color czy fontweight.\n\n\nimport matplotlib.pyplot as plt\n\nplt.plot([1, 2, 3, 4], [2, 4, 9, 16], marker='o', linestyle='-', color='blue')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\nplt.annotate('Ważny punkt (2, 4)',\n             xy=(2, 4),                           # Współrzędne punktu do zaznaczenia\n             xytext=(2.5, 6),                     # Współrzędne początku tekstu\n             arrowprops=dict(facecolor='red'),    # Właściwości strzałki (kolor)\n             fontsize=12,                         # Rozmiar czcionki\n             color='blue',                        # Kolor tekstu\n             fontweight='bold')                   # Grubość czcionki\n\nplt.show()\n\n\n\n\n\n\n\n\nJeśli chcesz dodać adnotację tylko z tekstem, składnia funkcji to annotate(text, xy, **kwargs), gdzie:\n\ntext - ciąg znaków reprezentujący tekst adnotacji.\nxy - krotka (x, y) określająca współrzędne, w których tekst adnotacji powinien się zacząć.\n**kwargs - dodatkowe argumenty dotyczące formatowania tekstu, takie jak fontsize, color, fontweight czy horizontalalignment.\n\n\nimport matplotlib.pyplot as plt\n\nplt.plot([1, 2, 3, 4], [2, 4, 9, 16], marker='o', linestyle='-', color='blue')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\nplt.annotate('Ważny punkt (2, 4)',\n             xy=(2, 4),                           # Współrzędne początku tekstu\n             fontsize=12,                         # Rozmiar czcionki\n             color='blue',                        # Kolor tekstu\n             fontweight='bold',                   # Grubość czcionki\n             horizontalalignment='right')         # Wyrównanie tekstu do prawej strony\n\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#etykiety-osi",
    "href": "matplotlib.html#etykiety-osi",
    "title": "6  Matplotlib",
    "section": "6.13 Etykiety osi",
    "text": "6.13 Etykiety osi\nFunkcje xlabel i ylabel łużą do dodawania etykiet osi X i Y na wykresie, odpowiednio. Etykiety osi pomagają w lepszym zrozumieniu prezentowanych danych, wskazując, jakie wartości są reprezentowane na poszczególnych osiach.\nSkładnia funkcji to xlabel(label, **kwargs) lub ylabel(label, **kwargs), gdzie:\n\nlabel - ciąg znaków reprezentujący tekst etykiety osi.\n**kwargs - dodatkowe argumenty dotyczące formatowania etykiety, takie jak fontsize, color, fontweight czy horizontalalignment.\n\n\nimport matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4]\ny = [2, 4, 6, 8]\n\nplt.plot(x, y, marker='o', linestyle='-', color='blue')\n\nplt.xlabel('Oś X', fontsize=12, color='red', fontweight='bold')\nplt.ylabel('Oś Y', fontsize=12, color='green', fontweight='bold')\n\nplt.show()\n\n\n\n\n\n\n\n\nFunkcja annotate pozwala na użycie składni LaTeX w tekście adnotacji, co jest szczególnie przydatne, gdy chcemy dodać na wykresie równania matematyczne lub symbole. Aby użyć składni LaTeX, należy umieścić tekst w znacznikach dolara ($).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\n\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('sin(x)')\n\n# Adnotacja z tekstem w składni LaTeX\nplt.annotate(r'$\\sin(\\frac{2\\pi}{3})=\\frac{\\sqrt{3}}{2}$',\n             xy=(2 * np.pi / 3, np.sqrt(3) / 2),  # Współrzędne punktu do zaznaczenia\n             xytext=(3, 1.0),                     # Współrzędne początku tekstu\n             fontsize=12,                         # Rozmiar czcionki\n             arrowprops=dict(facecolor='red'),    # Właściwości strzałki (kolor)\n             bbox=dict(facecolor='white'))        # Ramka wokół tekstu (kolor tła)\n\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#etykiety-podziałki-osi",
    "href": "matplotlib.html#etykiety-podziałki-osi",
    "title": "6  Matplotlib",
    "section": "6.14 Etykiety podziałki osi",
    "text": "6.14 Etykiety podziałki osi\nFunkcje xticks i yticks służą do manipulowania etykietami osi X i Y oraz wartościami na osi, odpowiednio. Pozwalają na kontrolowanie wyświetlania etykiet, odstępów między nimi oraz formatowania.\nxticks manipuluje etykietami i wartościami na osi X, a yticks na osi Y. Składnia funkcji to xticks(ticks, labels, **kwargs) lub yticks(ticks, labels, **kwargs), gdzie:\n\nticks - lista wartości, dla których mają być umieszczone etykiety na osi. Jeśli nie podano, pozostają aktualne wartości.\nlabels - lista ciągów znaków, które mają być użyte jako etykiety dla wartości z listy ticks. Jeśli nie podano, zostaną użyte domyślne etykiety.\n**kwargs - dodatkowe argumenty dotyczące formatowania etykiet, takie jak fontsize, color, fontweight czy rotation.\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0, 10, 0.1)\ny = np.sin(x)\n\nplt.plot(x, y)\n\nxtick_vals = [0, np.pi, 2 * np.pi, 3 * np.pi]\nxtick_labels = ['0', r'$\\pi$', r'$2\\pi$', r'$3\\pi$']\n\nytick_vals = [-1, -0.5, 0, 0.5, 1]\nytick_labels = ['-1', '-1/2', '0', '1/2', '1']\n\nplt.xticks(xtick_vals, xtick_labels, fontsize=12, color='red')\nplt.yticks(ytick_vals, ytick_labels, fontsize=12, rotation=45)\n\nplt.show()\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.arange(-3, 3, 0.1)\ny = x ** 2 + 2 * x\nplt.plot(x, y)\nplt.annotate(xy=(-1, 5), text=\"cos tam\")\nplt.xticks([-2, 1, 2], color=\"red\")\nplt.ylabel(\"abc\", color=\"green\")\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#wykres-kołowy",
    "href": "matplotlib.html#wykres-kołowy",
    "title": "6  Matplotlib",
    "section": "6.15 Wykres kołowy",
    "text": "6.15 Wykres kołowy\nWykres kołowy (pie chart) jest stosowany, gdy chcemy przedstawić proporcje różnych kategorii lub segmentów w stosunku do całości. Jest szczególnie użyteczny, gdy mamy niewielką liczbę kategorii (zazwyczaj nie więcej niż 5-7) oraz gdy dane są jakościowe (kategoryczne). Wykres kołowy pozwala na wizualne zrozumienie udziałów procentowych poszczególnych kategorii w ramach całego zbioru danych.\nPrzykłady danych, dla których stosuje się wykres kołowy:\n\nStruktura wydatków domowych, gdzie kategorie to: mieszkanie, jedzenie, transport, rozrywka, inne.\nProcentowy udział w rynku różnych firm w danej branży.\nRozkład głosów na partie polityczne w wyborach.\nProcentowy udział różnych rodzajów energii w produkcji energii elektrycznej (węgiel, gaz, energia odnawialna, energia jądrowa itp.).\n\nChociaż wykresy kołowe mają swoje zastosowania, są również krytykowane za ograniczoną precyzję w ocenie proporcji. Dlatego często zaleca się stosowanie innych rodzajów wykresów, takich jak słupkowe (bar chart) czy stosunkowe (stacked bar chart), które mogą być bardziej przejrzyste i precyzyjne w porównywaniu wartości między kategoriami.\nFunkcja pie służy do tworzenia wykresów kołowych. Pozwala na wizualne przedstawienie proporcji różnych segmentów względem całości.\nSkładnia funkcji to plt.pie(x, explode=None, labels=None, colors=None, autopct=None, shadow=False, startangle=0, counterclock=True), gdzie:\n\nx - lista wartości numerycznych, reprezentująca dane dla każdego segmentu. Funkcja pie automatycznie obliczy procentowe udziały każdej wartości względem sumy wszystkich wartości.\nexplode - lista wartości, które określają, czy (i jak bardzo) każdy segment ma być oddzielony od środka wykresu. Wartość 0 oznacza brak oddzielenia, a wartości większe oznaczają większe oddzielenie.\nlabels - lista ciągów znaków, które będą używane jako etykiety segmentów.\ncolors - lista kolorów dla poszczególnych segmentów.\nautopct - formatowanie procentów, które mają być wyświetlane na wykresie (np. '%1.1f%%').\nshadow - wartość logiczna (True/False), która określa, czy wykres ma mieć cień. Domyślnie ustawione na False.\nstartangle - kąt początkowy wykresu kołowego, mierzony w stopniach przeciwnie do ruchu wskazówek zegara od osi X.\ncounterclock - wartość logiczna (True/False), która określa, czy segmenty mają być rysowane zgodnie z ruchem wskazówek zegara. Domyślnie ustawione na True.\n\n\n\nimport matplotlib.pyplot as plt\n\n# Dane\nsizes = [20, 30, 40, 10]\nlabels = ['Kategoria A', 'Kategoria B', 'Kategoria C', 'Kategoria D']\ncolors = ['red', 'blue', 'green', 'yellow']\nexplode = (0, 0.1, 0, 0)  # Wyróżnienie segmentu Kategoria B\n\n# Tworzenie wykresu kołowego\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90)\n\n# Dodanie tytułu\nplt.title('Przykład wykresu kołowego')\n\n# Równomierne skalowanie osi X i Y, aby koło było okrągłe\nplt.axis('equal')\n\nplt.show()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n\n# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nlabels = ['Frogs', 'Hogs', 'Dogs', 'Logs']\nsizes = [15, 30, 45, 10]\nexplode = [0, 0.1, 0, 0]  # only \"explode\" the 2nd slice (i.e. 'Hogs')\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n\n# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nlabels = ['Frogs', 'Hogs', 'Dogs', 'Logs']\nsizes = [15, 30, 45, 10]\nexplode = [0, 0.1, 0, 0]  # only \"explode\" the 2nd slice (i.e. 'Hogs')\n\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nplt.axis('equal')\n\nplt.show()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Dane\nsizes = [20, 30, 40, 10]\nlabels = ['Kategoria A', 'Kategoria B', 'Kategoria C', 'Kategoria D']\nn = len(sizes)\n\n# Tworzenie mapy kolorów\ncmap = plt.get_cmap('viridis')\ncolors = [cmap(i) for i in np.linspace(0, 1, n)]\n\n# Tworzenie wykresu kołowego\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n\n# Dodanie tytułu\nplt.title('Przykład wykresu kołowego z mapą kolorów')\n\n# Równomierne skalowanie osi X i Y, aby koło było okrągłe\nplt.axis('equal')\n\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#podwykresy",
    "href": "matplotlib.html#podwykresy",
    "title": "6  Matplotlib",
    "section": "6.16 Podwykresy",
    "text": "6.16 Podwykresy\n\nFunkcja subplot pozwala na tworzenie wielu wykresów w pojedynczym oknie lub figurze. Dzięki temu można porównać różne wykresy, które mają wspólny kontekst lub prezentować różne aspekty danych.\nSkładnia funkcji to plt.subplot(nrows, ncols, index, **kwargs), gdzie:\n\nnrows - liczba wierszy w siatce wykresów.\nncols - liczba kolumn w siatce wykresów.\nindex - indeks bieżącego wykresu, który ma być utworzony (indeksacja zaczyna się od 1). Indeksy są numerowane wierszami, tzn. kolejny wykres w rzędzie będzie miał indeks o jeden większy.\n**kwargs - dodatkowe argumenty dotyczące formatowania wykresu.\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 2 * np.pi, 100)\n\n# Tworzenie siatki wykresów 2x2\n# Pierwszy wykres (w lewym górnym rogu)\nplt.subplot(2, 2, 1)\nplt.plot(x, np.sin(x))\nplt.title('sin(x)')\n\n# Drugi wykres (w prawym górnym rogu)\nplt.subplot(2, 2, 2)\nplt.plot(x, np.cos(x))\nplt.title('cos(x)')\n\n# Trzeci wykres (w lewym dolnym rogu)\nplt.subplot(2, 2, 3)\nplt.plot(x, np.tan(x))\nplt.title('tan(x)')\n\n# Czwarty wykres (w prawym dolnym rogu)\nplt.subplot(2, 2, 4)\nplt.plot(x, -np.sin(x))\nplt.title('-sin(x)')\n\n# Dopasowanie odstępów między wykresami\nplt.tight_layout()\n\n# Wyświetlenie wykresów\nplt.show()\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.arange(0, 3, 0.1)\nplt.subplot(2, 2, 1)\nplt.plot(x, x)\nplt.subplot(2, 2, 2)\nplt.plot(x, x * 2)\nplt.subplot(2, 2, 3)\nplt.plot(x, x * x)\nplt.subplot(2, 2, 4)\nplt.plot(x, x ** 3)\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#siatka",
    "href": "matplotlib.html#siatka",
    "title": "6  Matplotlib",
    "section": "6.17 Siatka",
    "text": "6.17 Siatka\nFunkcja grid pozwala na dodanie siatki na wykresie, co ułatwia ocenę wartości na osiach i ich porównywanie. Można kontrolować kolor, grubość i styl linii siatki, a także określać, które osie mają mieć siatkę.\nSkładnia funkcji to plt.grid(b=None, which='major', axis='both', **kwargs), gdzie:\n\nb - wartość logiczna (True/False), która określa, czy siatka ma być wyświetlana. Domyślnie ustawione na None, co oznacza, że Matplotlib automatycznie określa, czy siatka powinna być wyświetlana na podstawie konfiguracji.\nwhich - określa, które linie siatki mają być wyświetlane: ‘major’ (tylko linie siatki dla głównych podziałek), ‘minor’ (linie siatki dla podziałek pomocniczych), lub ‘both’ (domyślnie - linie siatki dla obu rodzajów podziałek).\naxis - określa, które osie mają mieć siatkę: ‘both’ (obie osie), ‘x’ (tylko oś X), lub ‘y’ (tylko oś Y).\n**kwargs - dodatkowe argumenty dotyczące formatowania siatki.\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\n\n# Tworzenie wykresu\nplt.plot(x, y, color='blue', linewidth=2)\n\n# Dodanie siatki\nplt.grid(True, which='both', color='gray', linewidth=0.5, linestyle='--')\n\n# Dodanie tytułu i etykiet osi\nplt.title('Wykres funkcji sin(x)')\nplt.xlabel('x')\nplt.ylabel('sin(x)')\n\n# Wyświetlenie wykresu\nplt.show()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, np.pi * 2, 100)\nplt.subplot(3, 1, 1)\nplt.plot(x, np.sin(x), 'r')\nplt.grid(True)\nplt.xlim(0, np.pi * 2)\nplt.subplot(3, 1, 2)\nplt.plot(x, np.cos(x), 'g')\nplt.grid(True)\nplt.xlim(0, np.pi * 2)\nplt.subplot(3, 1, 3)\nplt.plot(x, np.sin(x), 'r', x, np.cos(x), 'g')\nplt.grid(True)\nplt.xlim(0, np.pi * 2)\nplt.tight_layout()\nplt.savefig(\"fig3.png\", dpi=72)\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#wykres-dwuosiowy",
    "href": "matplotlib.html#wykres-dwuosiowy",
    "title": "6  Matplotlib",
    "section": "6.18 Wykres dwuosiowy",
    "text": "6.18 Wykres dwuosiowy\nFunkcja twinx w bibliotece Matplotlib pozwala na utworzenie drugiej osi Y, która będzie współdzielić oś X z pierwszą osią Y. Dzięki temu, można w prosty sposób przedstawić dwie serie danych, które są mierzne w różnych jednostkach, ale mają wspólną zmienną niezależną.\nSkładnia funkcji to twinx(ax=None, **kwargs), gdzie:\n\nax - obiekt Axes, który ma być użyty do tworzenia nowej osi Y. Domyślnie ustawione na None, co oznacza, że będzie tworzona nowa osie Y.\n**kwargs - dodatkowe argumenty dotyczące formatowania nowej osi Y.\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig, ax1 = plt.subplots()\nx = np.arange(0.01, 10.0, 0.01)\ny = x ** 2\nax1.plot(x, y, 'r')\nax2 = ax1.twinx()\ny2 = np.sin(x)\nax2.plot(x, y2)\nfig.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig, ax1 = plt.subplots()\nt = np.arange(0.01, 10.0, 0.01)\ns1 = np.exp(t)\nax1.plot(t, s1, 'b-')\nax1.set_xlabel('time (s)')\n\nax1.set_ylabel('exp', color='b')\nax1.tick_params('y', colors='b')\n\nax2 = ax1.twinx()\ns2 = np.sin(2 * np.pi * t)\nax2.plot(t, s2, 'r.')\nax2.set_ylabel('sin', color='r')\nax2.tick_params('y', colors='r')\n\nfig.tight_layout()\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#wykres-słupkowy",
    "href": "matplotlib.html#wykres-słupkowy",
    "title": "6  Matplotlib",
    "section": "6.19 Wykres słupkowy",
    "text": "6.19 Wykres słupkowy\nWykres słupkowy jest stosowany do przedstawiania danych kategorialnych lub dyskretnych. Jest to powszechnie używany rodzaj wykresu, który pomaga wizualnie porównać wartości lub ilości dla różnych kategorii. Oto kilka typów danych, dla których wykres słupkowy może być stosowany:\n\nCzęstości: Wykres słupkowy jest używany do przedstawiania liczby wystąpień różnych kategorii, takich jak wyniki ankiety, preferencje konsumentów lub różne grupy ludności.\nProporcje: Można go stosować do przedstawiania udziału procentowego poszczególnych kategorii w całości, np. udział rynkowy różnych firm, procentowe wyniki testów czy procentowy rozkład ludności według wieku.\nWartości liczbowe: Wykres słupkowy może przedstawiać wartości liczbowe związane z różnymi kategoriami, np. sprzedaż produktów, przychody z różnych źródeł czy średnią temperaturę w różnych miastach.\nDanych szeregów czasowych: Wykres słupkowy może być również używany do przedstawiania danych szeregów czasowych w przypadku, gdy zmiany występują w regularnych odstępach czasu, np. roczna sprzedaż, miesięczne opady czy tygodniowe przychody.\n\nWarto zauważyć, że wykresy słupkowe są odpowiednie, gdy mamy do czynienia z niewielką liczbą kategorii, ponieważ zbyt wiele słupków na wykresie może sprawić, że stanie się on trudny do interpretacji. W takich przypadkach warto rozważyć inne typy wykresów, takie jak wykres kołowy lub stosunkowy.\nFunkcja bar w bibliotece Matplotlib służy do tworzenia wykresów słupkowych (bar chart). Wykresy słupkowe są często stosowane, gdy chcemy porównać wartości różnych kategorii.\nSkładnia funkcji to plt.bar(x, height, width=0.8, bottom=None, align='center', data=None, **kwargs), gdzie:\n\nx - pozycje słupków na osi X. Może to być sekwencja wartości numerycznych lub lista etykiet, które będą umieszczone na osi X.\nheight - wysokość słupków.\nwidth - szerokość słupków.\nbottom - położenie dolnej krawędzi słupków. Domyślnie ustawione na None, co oznacza, że słupki zaczynają się od zera.\nalign - sposób wyśrodkowania słupków wzdłuż osi X. Domyślnie ustawione na ‘center’.\ndata - obiekt DataFrame, który zawiera dane do wykresu.\n**kwargs - dodatkowe argumenty dotyczące formatowania wykresu, takie jak kolor, przezroczystość, etykiety osi, tytuł i legendę.\n\n\nimport matplotlib.pyplot as plt\n\n# Dane\nkategorie = ['Kategoria 1', 'Kategoria 2', 'Kategoria 3']\nwartosci = [10, 20, 15]\n\n# Tworzenie wykresu słupkowego\nplt.bar(kategorie, wartosci, color='green', alpha=0.5)\n\n# Dodanie tytułu i etykiet osi\nplt.title('Wykres słupkowy')\nplt.xlabel('Kategorie')\nplt.ylabel('Wartości')\n\n# Wyświetlenie wykresu\nplt.show()\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nwys = [10, 15, 18, 22, 27]\nx = np.arange(0, len(wys))\nk = [\"black\", \"red\", \"green\", \"yellow\", \"pink\"]\nplt.bar(x, wys, color=k, width=0.75)\netyk = [\"Kategoria A\", \"Kategoria B\", \"Kategoria C\", \"Kategoria D\", \"Kategoria E\"]\nplt.xticks(x, etyk, rotation=45)\ny2 = [20, 30, 40, 50, 60]\nplt.plot(x, y2)\nplt.title(\"tytulik\")\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nheight = [3, 12, 5, 18, 45]\nbars = ('A', 'B', 'C', 'D', 'E')\ny_pos = np.arange(len(bars))\nplt.bar(y_pos, height, color=['black', 'red', 'green', 'blue', 'cyan'])\nplt.xticks(y_pos, bars)\nplt.show()\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = [[30, 25, 50, 20],\n        [40, 23, 51, 17],\n        [35, 22, 45, 19]]\nX = np.arange(4)\n\nplt.bar(X + 0.00, data[0], color='b', width=0.25, label=\"A\")\nplt.bar(X + 0.25, data[1], color='g', width=0.25, label=\"B\")\nplt.bar(X + 0.50, data[2], color='r', width=0.25, label=\"C\")\nlabelsbar = np.arange(2015, 2019)\nplt.xticks(X + 0.25, labelsbar)\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nN = 5\n\nboys = (20, 35, 30, 35, 27)\ngirls = (25, 32, 34, 20, 25)\nind = np.arange(N)\nwidth = 0.35\n\nplt.bar(ind, boys, width, label=\"boys\")\nplt.bar(ind, girls, width, bottom=boys, label=\"girls\")\n\nplt.ylabel('Contribution')\nplt.title('Contribution by the teams')\nplt.xticks(ind, ('T1', 'T2', 'T3', 'T4', 'T5'))\nplt.yticks(np.arange(0, 81, 10))\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\nFunkcja barh służy do tworzenia wykresów słupkowych horyzontalnych (horizontal bar chart). Wykresy słupkowe horyzontalne są często stosowane, gdy chcemy porównać wartości różnych kategorii, a etykiety na osi X są długie lub są bardzo liczne.\nSkładnia funkcji to plt.barh(y, width, height=0.8, left=None, align='center', data=None, **kwargs), gdzie:\n\ny - pozycje słupków na osi Y. Może to być sekwencja wartości numerycznych lub lista etykiet, które będą umieszczone na osi Y.\nwidth - szerokość słupków.\nheight - wysokość słupków.\nleft - położenie lewej krawędzi słupków. Domyślnie ustawione na None, co oznacza, że słupki zaczynają się od zera.\nalign - sposób wyśrodkowania słupków wzdłuż osi Y. Domyślnie ustawione na ‘center’.\ndata - obiekt DataFrame, który zawiera dane do wykresu.\n**kwargs - dodatkowe argumenty dotyczące formatowania wykresu, takie jak kolor, przezroczystość, etykiety osi, tytuł i legenda.\n\n\nimport matplotlib.pyplot as plt\n\n# Dane\nkategorie = ['Kategoria 1', 'Kategoria 2', 'Kategoria 3']\nwartosci = [10, 20, 15]\n\n# Tworzenie wykresu słupkowego horyzontalnego\nplt.barh(kategorie, wartosci, color='green', alpha=0.5)\n\n# Dodanie tytułu i etykiet osi\nplt.title('Wykres słupkowy horyzontalny')\nplt.xlabel('Wartości')\nplt.ylabel('Kategorie')\n\n# Wyświetlenie wykresu\nplt.show()\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nwidth = [3, 12, 5, 18, 45]\nbars = ('A', 'B', 'C', 'D', 'E')\nx_pos = np.arange(len(bars))\nplt.barh(x_pos, width, color=['black', 'red', 'green', 'blue', 'cyan'])\nplt.yticks(x_pos, bars)\nplt.show()\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = [[30, 25, 50, 20],\n        [40, 23, 51, 17],\n        [35, 22, 45, 19]]\nY = np.arange(4)\n\nplt.barh(Y + 0.00, data[0], color='b', height=0.25, label=\"A\")\nplt.barh(Y + 0.25, data[1], color='g', height=0.25, label=\"B\")\nplt.barh(Y + 0.50, data[2], color='r', height=0.25, label=\"C\")\nlabelsbar = np.arange(2015, 2019)\nplt.yticks(Y + 0.25, labelsbar)\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nN = 5\n\nboys = (20, 35, 30, 35, 27)\ngirls = (25, 32, 34, 20, 25)\nind = np.arange(N)\nheight = 0.35\n\nplt.barh(ind, boys, height, label=\"boys\")\nplt.barh(ind, girls, height, left=boys, label=\"girls\")\n\nplt.xlabel('Contribution')\nplt.title('Contribution by the teams')\nplt.yticks(ind, ('T1', 'T2', 'T3', 'T4', 'T5'))\nplt.xticks(np.arange(0, 81, 10))\nplt.legend()\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#wykres-pudełkowy",
    "href": "matplotlib.html#wykres-pudełkowy",
    "title": "6  Matplotlib",
    "section": "6.20 Wykres pudełkowy",
    "text": "6.20 Wykres pudełkowy\nWykres pudełkowy (inaczej box plot) jest stosowany do przedstawiania informacji o rozkładzie danych liczbowych oraz do identyfikacji wartości odstających. Jest szczególnie przydatny w przypadku analizy danych ciągłych, które mają różne wartości i rozkłady. Oto kilka typów danych, dla których wykres pudełkowy może być stosowany:\n\nPorównanie grup: Wykres pudełkowy jest używany do porównywania rozkładu danych między różnymi grupami. Na przykład, można go użyć do porównania wyników testów uczniów z różnych szkół, wynagrodzeń w różnych sektorach czy wartości sprzedaży różnych produktów.\nIdentyfikacja wartości odstających: Wykres pudełkowy jest używany do identyfikacji wartości odstających (outlierów) w danych, które mogą wskazywać na błędy pomiarowe, nietypowe obserwacje lub wartości ekstremalne. Na przykład, może to być użyte do wykrywania anomalii w danych meteorologicznych, wartościach giełdowych czy danych medycznych.\nAnaliza rozkładu: Wykres pudełkowy pomaga zrozumieć rozkład danych, takich jak mediana, kwartyle, zakres wartości i potencjalne wartości odstające. Może to być użyte w analizie danych takich jak oceny, wzrost ludności, wartość akcji czy ceny nieruchomości.\nWizualizacja wielowymiarowych danych: Wykres pudełkowy może być używany do wizualizacji wielowymiarowych danych, przedstawiając rozkład wielu zmiennych na jednym wykresie. Na przykład, można porównać zmienne takie jak wiek, zarobki i wykształcenie w badaniu demograficznym.\n\nWarto zauważyć, że wykres pudełkowy jest szczególnie przydatny, gdy chcemy zrozumieć rozkład danych, ale nie pokazuje on konkretnej liczby obserwacji ani wartości indywidualnych punktów danych. W takich przypadkach inne rodzaje wykresów, takie jak wykres punktowy, mogą być bardziej odpowiednie.\nWykres pudełkowy pokazuje pięć statystyk opisowych danych: minimum, pierwszy kwartyl (Q1), medianę, trzeci kwartyl (Q3) i maksimum.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Przykładowe dane\ndata = np.random.rand(100)\n\n# Tworzenie wykresu\nfig, ax = plt.subplots()\n\n# Rysowanie boxplota\nax.boxplot(data)\n\n# Dodanie opisów\nax.set_title('Boxplot')\nax.set_ylabel('Wartości')\nax.set_xticklabels(['Przykładowe dane'])\n\n# Wyświetlanie wykresu\nplt.show()\n\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Creating dataset\nnp.random.seed(10)\ndata = np.random.normal(100, 20, 200)\n\n# Creating plot\nplt.boxplot(data)\n\n# show plot\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#histogram",
    "href": "matplotlib.html#histogram",
    "title": "6  Matplotlib",
    "section": "6.21 Histogram",
    "text": "6.21 Histogram\nWykres histogramu jest stosowany do przedstawiania rozkładu danych liczbowych, zarówno ciągłych, jak i dyskretnych. Histogram pokazuje częstość występowania danych w określonych przedziałach (binach), co pozwala na analizę dystrybucji i identyfikację wzorców. Oto kilka typów danych, dla których histogram może być stosowany:\n\nAnaliza rozkładu: Histogram może być używany do analizy rozkładu danych, takich jak oceny, ceny, wartości akcji, wzrost ludności czy dane meteorologiczne. Pozwala to zrozumieć, jak dane są rozłożone, czy są skoncentrowane wokół pewnych wartości, czy mają długi ogon (tj. czy występują wartości odstające).\nIdentyfikacja tendencji: Histogram może pomóc w identyfikacji tendencji lub wzorców w danych. Na przykład, można użyć histogramu do identyfikacji sezonowych wzorców sprzedaży, zmian w wartościach giełdowych czy wzorców migracji ludności.\nPorównanie grup: Histogram może być również używany do porównywania rozkładu danych między różnymi grupami. Na przykład, można go użyć do porównania wyników testów uczniów z różnych szkół, wynagrodzeń w różnych sektorach czy wartości sprzedaży różnych produktów.\nSzacowanie parametrów: Histogram może pomóc w szacowaniu parametrów rozkładu, takich jak średnia, mediana czy wariancja, co może być użyteczne w analizie statystycznej.\n\nWarto zauważyć, że histogram jest odpowiedni dla danych liczbowych, ale nie jest przeznaczony do przedstawiania danych kategorialnych. W takich przypadkach inne rodzaje wykresów, takie jak wykres słupkowy, mogą być bardziej odpowiednie.\n\nimport matplotlib.pyplot as plt\n\nx = [1, 1, 2, 3, 3, 5, 7, 8, 9, 10,\n     10, 11, 11, 13, 13, 15, 16, 17, 18, 18]\n\nplt.hist(x, bins=4)\nplt.show()\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nages = [20, 22, 25, 27, 21, 23, 37, 31, 61, 45, 41, 32]\nbins = [18, 25, 35, 60, 100]\ncats2 = pd.cut(ages, [18, 26, 36, 61, 100], right=False)\nprint(cats2)\ngroup_names = ['Youth', 'YoungAdult',\n               'MiddleAged', 'Senior']\ndata = pd.cut(ages, bins, labels=group_names)\nplt.hist(data)\nplt.show()\n\n[[18, 26), [18, 26), [18, 26), [26, 36), [18, 26), ..., [26, 36), [61, 100), [36, 61), [36, 61), [26, 36)]\nLength: 12\nCategories (4, interval[int64, left]): [[18, 26) &lt; [26, 36) &lt; [36, 61) &lt; [61, 100)]\n\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n\nages = [20, 22, 25, 27, 21, 23, 37, 31, 61, 45, 41, 32]\nbins = [18, 25, 35, 60, 100]\nplt.hist(ages, bins=bins)\nplt.show()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n\nx = [1, 1, 2, 3, 3, 5, 7, 8, 9, 10,\n     10, 11, 11, 13, 13, 15, 14, 12, 18, 18]\n\nplt.hist(x, bins=[0, 5, 10, 15, 20])\nplt.xticks([0, 5, 10, 15, 20])\nplt.show()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n\nx = [1, 1, 2, 3, 3, 5, 7, 8, 9, 10,\n     10, 11, 11, 13, 13, 15, 14, 12, 18, 18]\n\nplt.hist(x, bins=[0, 5, 10, 15, 20], cumulative=True)\nplt.xticks([0, 5, 10, 15, 20])\nplt.show()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n\nx = [1, 1, 2, 3, 3, 5, 7, 8, 9, 10,\n     10, 11, 11, 13, 13, 15, 14, 12, 18, 18]\n\nplt.hist(x, bins=[0, 5, 10, 15, 20], density=True)\nplt.xticks([0, 5, 10, 15, 20])\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#wykres-warstwowy",
    "href": "matplotlib.html#wykres-warstwowy",
    "title": "6  Matplotlib",
    "section": "6.22 Wykres warstwowy",
    "text": "6.22 Wykres warstwowy\nhttps://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nnp.random.seed(123)\n\ndf = pd.DataFrame(np.random.rand(10, 4), columns=['a', 'b', 'c', 'd'])\ndf.plot.area()\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#wykres-pierścieniowy",
    "href": "matplotlib.html#wykres-pierścieniowy",
    "title": "6  Matplotlib",
    "section": "6.23 Wykres pierścieniowy",
    "text": "6.23 Wykres pierścieniowy\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnp.random.seed(345)\ndata = np.random.randint(20, 100, 6)\ntotal = sum(data)\ndata_per = data / total * 100\nexplode = (0.2, 0, 0, 0, 0, 0)\nplt.pie(data_per, explode=explode, labels=[round(i, 2) for i in list(data_per)])\ncircle = plt.Circle((0, 0), 0.7, color='white')\np = plt.gcf()\np.gca().add_artist(circle)\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib.html#wykresy-w-przestrzeni",
    "href": "matplotlib.html#wykresy-w-przestrzeni",
    "title": "6  Matplotlib",
    "section": "6.24 Wykresy w przestrzeni",
    "text": "6.24 Wykresy w przestrzeni\n\n6.24.1 Helisa\n\\[\\begin{cases}\nx=a\\cos (t) \\\\\ny=a\\sin(t) \\\\\nz=at\n\\end{cases}\\]\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = plt.axes(projection='3d')\nt = np.linspace(0, 15, 1000)\na = 3\nxline = a * np.sin(t)\nyline = a * np.cos(t)\nzline = a * t\nax.plot3D(xline, yline, zline)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n6.24.2 Torus\n\\[p(\\alpha,\\ \\beta)=\\Big((R+r\\cos \\alpha)\\cos \\beta,\\ (R+r\\cos \\alpha)\\sin \\beta,\\ r\\sin \\alpha\\Big)\\]\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = plt.axes(projection='3d')\nr = 1\nR = 5\nalpha = np.arange(0, 2 * np.pi, 0.1)\nbeta = np.arange(0, 2 * np.pi, 0.1)\nalpha, beta = np.meshgrid(alpha, beta)\nx = (R + r * np.cos(alpha)) * np.cos(beta)\ny = (R + r * np.cos(alpha)) * np.sin(beta)\nz = r * np.sin(alpha)\nax.plot_wireframe(x, y, z)\nplt.show()\n\n\n\n\n\n\n\n\nŹródło:\n\nhttps://www.geeksforgeeks.org/bar-plot-in-matplotlib/\nDokumentacja https://matplotlib.org/\nhttps://datatofish.com/plot-histogram-python/\nhttps://jakevdp.github.io/PythonDataScienceHandbook/04.12-three-dimensional-plotting.html",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Matplotlib</span>"
    ]
  },
  {
    "objectID": "seaborn.html",
    "href": "seaborn.html",
    "title": "7  Seaborn",
    "section": "",
    "text": "7.1 Ładowanie wbudowanych danych\nFunkcja sns.load_dataset() pozwala na ładowanie wbudowanych zestawów danych w bibliotece Seaborn. Wszystkie wbudowane zestawy danych są przechowywane jako ramki danych Pandas.\nimport seaborn as sns\n\niris_data = sns.load_dataset('iris')\nprint(iris_data.head())\n\n   sepal_length  sepal_width  petal_length  petal_width species\n0           5.1          3.5           1.4          0.2  setosa\n1           4.9          3.0           1.4          0.2  setosa\n2           4.7          3.2           1.3          0.2  setosa\n3           4.6          3.1           1.5          0.2  setosa\n4           5.0          3.6           1.4          0.2  setosa\nimport seaborn as sns\n\ntitanic_data = sns.load_dataset('titanic')\nprint(titanic_data.head())\n\n   survived  pclass     sex   age  sibsp  parch     fare embarked  class  \\\n0         0       3    male  22.0      1      0   7.2500        S  Third   \n1         1       1  female  38.0      1      0  71.2833        C  First   \n2         1       3  female  26.0      0      0   7.9250        S  Third   \n3         1       1  female  35.0      1      0  53.1000        S  First   \n4         0       3    male  35.0      0      0   8.0500        S  Third   \n\n     who  adult_male deck  embark_town alive  alone  \n0    man        True  NaN  Southampton    no  False  \n1  woman       False    C    Cherbourg   yes  False  \n2  woman       False  NaN  Southampton   yes   True  \n3  woman       False    C  Southampton   yes  False  \n4    man        True  NaN  Southampton    no   True\nimport seaborn as sns\n\ntips_data = sns.load_dataset('tips')\nprint(tips_data.head())\n\n   total_bill   tip     sex smoker  day    time  size\n0       16.99  1.01  Female     No  Sun  Dinner     2\n1       10.34  1.66    Male     No  Sun  Dinner     3\n2       21.01  3.50    Male     No  Sun  Dinner     3\n3       23.68  3.31    Male     No  Sun  Dinner     2\n4       24.59  3.61  Female     No  Sun  Dinner     4",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Seaborn</span>"
    ]
  },
  {
    "objectID": "seaborn.html#ładowanie-wbudowanych-danych",
    "href": "seaborn.html#ładowanie-wbudowanych-danych",
    "title": "7  Seaborn",
    "section": "",
    "text": "Ładowanie zestawu danych “iris”:\n\n\n\nŁadowanie zestawu danych “titanic”:\n\n\n\nŁadowanie zestawu danych “tips”:",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Seaborn</span>"
    ]
  },
  {
    "objectID": "seaborn.html#wykres-punktowy",
    "href": "seaborn.html#wykres-punktowy",
    "title": "7  Seaborn",
    "section": "7.2 Wykres punktowy",
    "text": "7.2 Wykres punktowy\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Ładowanie danych\niris_data = sns.load_dataset('iris')\n\n# Tworzenie wykresu punktowego\nsns.scatterplot(x='sepal_length', y='sepal_width', data=iris_data)\n\n# Dodanie tytułu i etykiet osi\nplt.title('Wykres punktowy długości i szerokości kielicha (sepal)')\nplt.xlabel('Długość kielicha (cm)')\nplt.ylabel('Szerokość kielicha (cm)')\n\n# Wyświetlenie wykresu\nplt.show()\n\n\n\n\n\n\n\n\nFunkcja sns.scatterplot() oferuje dodatkowe parametry, które pozwalają na modyfikację wykresu. Przykłady obejmują:\n\nParametr hue: pozwala na dodanie kolorowania punktów na podstawie wartości zmiennej kategorialnej.\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Ładowanie danych\niris_data = sns.load_dataset('iris')\n\n# Tworzenie wykresu punktowego z parametrem 'hue'\nsns.scatterplot(x='sepal_length', y='sepal_width', hue='species', data=iris_data)\n\n# Dodanie tytułu i etykiet osi\nplt.title('Wykres punktowy długości i szerokości kielicha (sepal) z parametrem hue')\nplt.xlabel('Długość kielicha (cm)')\nplt.ylabel('Szerokość kielicha (cm)')\n\n# Wyświetlenie wykresu\nplt.show()\n\n\n\n\n\n\n\n\n\nParametr size: pozwala na zmianę wielkości punktów na podstawie wartości zmiennej numerycznej.\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Ładowanie danych\niris_data = sns.load_dataset('iris')\n\n# Tworzenie wykresu punktowego z parametrem 'size'\nsns.scatterplot(x='sepal_length', y='sepal_width', size='petal_length', data=iris_data)\n\n# Dodanie tytułu i etykiet osi\nplt.title('Wykres punktowy długości i szerokości kielicha (sepal) z parametrem size')\nplt.xlabel('Długość kielicha (cm)')\nplt.ylabel('Szerokość ielicha (cm)')\n\n# Wyświetlenie wykresu\nplt.show()\n\n\n\n\n\n\n\n\n\nParametr style: pozwala na zmianę stylu punktów na podstawie wartości zmiennej kategorialnej.\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Ładowanie danych\niris_data = sns.load_dataset('iris')\n\n# Tworzenie wykresu punktowego z parametrem 'size'\nsns.scatterplot(x='sepal_length', y='sepal_width', size='petal_length', data=iris_data)\n\n# Dodanie tytułu i etykiet osi\nplt.title('Wykres punktowy długości i szerokości kielicha (sepal) z parametrem size')\nplt.xlabel('Długość kielicha (cm)')\nplt.ylabel('Szerokość kielicha (cm)')\n\n# Wyświetlenie wykresu\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Seaborn</span>"
    ]
  },
  {
    "objectID": "seaborn.html#wykres-liniowy",
    "href": "seaborn.html#wykres-liniowy",
    "title": "7  Seaborn",
    "section": "7.3 Wykres liniowy",
    "text": "7.3 Wykres liniowy\nFunkcja sns.lineplot() w bibliotece Seaborn służy do tworzenia wykresów liniowych, które pozwalają na wizualizację związku między dwiema zmiennymi, zwłaszcza w przypadku danych czasowych. Wykres liniowy jest użyteczny do prezentacji trendów i zmian w danych na przestrzeni czasu lub innej zmiennej ciągłej.\nOto przykład użycia funkcji sns.lineplot():\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Przykładowe dane\ndata = {\n    'year': [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019],\n    'value': [100, 110, 105, 120, 130, 140, 150, 170, 180, 200]\n}\n\n# Ładowanie danych jako ramki danych Pandas\nimport pandas as pd\ndf = pd.DataFrame(data)\n\n# Tworzenie wykresu liniowego\nsns.lineplot(x='year', y='value', data=df)\n\n# Dodanie tytułu i etykiet osi\nplt.title('Przykład wykresu liniowego')\nplt.xlabel('Rok')\nplt.ylabel('Wartość')\n\n# Wyświetlenie wykresu\nplt.show()\n\n\n\n\n\n\n\n\nW powyższym przykładzie tworzymy wykres liniowy na podstawie ramki danych df. Parametry x i y określają zmienne, które mają być przedstawione na osiach wykresu. Parametr data wskazuje źródło danych, w tym przypadku ramkę danych Pandas.\nFunkcja sns.lineplot() oferuje dodatkowe parametry, które pozwalają na modyfikację wykresu. Przykłady obejmują:\n\nParametr hue: pozwala na dodanie kolorowania linii na podstawie wartości zmiennej kategorialnej.\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Przykładowe dane\ndata = {\n    'year': [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019] * 2,\n    'value': [100, 110, 105, 120, 130, 140, 150, 170, 180, 200] +\n             [200, 180, 170, 160, 150, 140, 130, 120, 110, 100],\n    'category': ['A'] * 10 + ['B'] * 10\n}\n\n# Ładowanie danych jako ramki danych Pandas\ndf = pd.DataFrame(data)\n\n# Tworzenie wykresu liniowego z parametrem 'hue'\nsns.lineplot(x='year', y='value', hue='category', data=df)\n\n# Dodanie tytułu i etykiet osi\nplt.title('Przykład wykresu liniowego z parametrem hue')\nplt.xlabel('Rok')\nplt.ylabel('Wartość')\n\n# Wyświetlenie wykresu\nplt.show()\n\n\n\n\n\n\n\n\n\nParametr style: pozwala na zmianę stylu linii na podstawie wartości zmiennej kategorialnej.\n\nsns.lineplot(x='year', y='value', style='category', data=df)\n\nParametr markers: pozwala na dodanie znaczników do punktów danych.\n\nsns.lineplot(x='year', y='value', markers=True, data=df)\n\nParametr ci: pozwala na dodanie przedziału ufności (confidence interval) dla wykresu, który może być użyteczny w przypadku wielokrotnych pomiarów dla tych samych wartości na osi X.\n\nsns.lineplot(x='year', y='value', ci=95, data=df)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Seaborn</span>"
    ]
  },
  {
    "objectID": "seaborn.html#style",
    "href": "seaborn.html#style",
    "title": "7  Seaborn",
    "section": "7.4 Style",
    "text": "7.4 Style\nBiblioteka Seaborn pozwala na dostosowywanie estetyki wykresów za pomocą palet kolorów i styli, co pozwala na uzyskanie atrakcyjnych i czytelnych wizualizacji danych. Oto kilka przykładów, jak możemy dostosować estetykę wykresów w Seaborn:\n\nPalety kolorów:\n\nPalety kolorów pozwalają na zmianę kolorystyki wykresów. Seaborn oferuje kilka wbudowanych palet kolorów, które można łatwo zastosować do wykresów.\nPrzykład użycia palety kolorów ‘coolwarm’ w wykresie punktowym:\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\niris_data = sns.load_dataset('iris')\n\n# Ustawienie palety kolorów 'coolwarm'\nsns.set_palette('coolwarm')\n\nsns.scatterplot(x='sepal_length', y='sepal_width', hue='species', data=iris_data)\n\nplt.show()\n\n\n\n\n\n\n\n\nAby zresetować paletę kolorów do domyślnej, użyj sns.set_palette('deep').\n\nStyle wykresów:\n\nSeaborn pozwala na zmianę stylu wykresów, co może wpłynąć na ogólny wygląd i czytelność wizualizacji. Biblioteka oferuje kilka wbudowanych styli.\nPrzykład użycia stylu ‘whitegrid’ w wykresie punktowym:\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\niris_data = sns.load_dataset('iris')\n\n# Ustawienie stylu 'whitegrid'\nsns.set_style('whitegrid')\n\nsns.scatterplot(x='sepal_length', y='sepal_width', hue='species', data=iris_data)\n\nplt.show()\n\n\n\n\n\n\n\n\nInne dostępne style to: ‘darkgrid’, ‘white’, ‘ticks’ i ‘dark’. Aby zresetować styl do domyślnego, użyj sns.set_style('darkgrid').\n\nSkalowanie elementów graficznych:\n\nSeaborn pozwala na skalowanie elementów graficznych, co może być przydatne w przypadku różnych rozdzielczości ekranów lub potrzeby zmiany rozmiaru wykresów.\nPrzykład użycia kontekstu ‘poster’ w wykresie punktowym:\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\niris_data = sns.load_dataset('iris')\n\n# Ustawienie kontekstu 'poster'\nsns.set_context('poster')\n\nsns.scatterplot(x='sepal_length', y='sepal_width', hue='species', data=iris_data)\n\nplt.show()\n\n\n\n\n\n\n\n\nInne dostępne konteksty to: ‘paper’, ‘notebook’ i ‘talk’. Aby zresetować kontekst do domyślnego, użyj sns.set_context('notebook').\nKombinując te metody, można tworzyć różnorodne, atrakcyjne i czytelne wizualizacje danych.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Seaborn</span>"
    ]
  }
]